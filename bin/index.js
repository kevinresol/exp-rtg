// Generated by Haxe 4.0.5
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Command = $hxEnums["Command"] = { __ename__ : true, __constructs__ : ["SetDirection"]
	,SetDirection: ($_=function(dir) { return {_hx_index:0,dir:dir,__enum__:"Command",toString:$estr}; },$_.__params__ = ["dir"],$_)
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var Game = function() {
	this.players = [];
	var timer = new haxe_Timer(100);
	timer.run = $bind(this,this.step);
};
Game.__name__ = true;
Game.prototype = {
	removePlayer: function(v) {
		var _g_head = v.list.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var v1 = val;
			window.document.body.removeChild(v1.div);
			v1.div = null;
		}
		HxOverrides.remove(this.players,v);
	}
	,addPlayer: function() {
		var player = new Player();
		this.players.push(player);
		return player;
	}
	,step: function() {
		var _g = 0;
		var _g1 = this.players;
		while(_g < _g1.length) {
			var player = _g1[_g];
			++_g;
			player.step();
		}
	}
	,__class__: Game
};
var Player = function() {
	this.list = new haxe_ds_List();
	this.dir = 3;
	this.list.add(new Block(0,0));
	this.list.add(new Block(1,0));
	this.list.add(new Block(2,0));
	this.list.add(new Block(3,0));
	this.list.add(new Block(4,0));
};
Player.__name__ = true;
Player.prototype = {
	step: function() {
		var head = this.list.last();
		var tail = this.list.pop();
		switch(this.dir) {
		case 0:
			tail.set(head.x,head.y - 1);
			break;
		case 1:
			tail.set(head.x,head.y + 1);
			break;
		case 2:
			tail.set(head.x - 1,head.y);
			break;
		case 3:
			tail.set(head.x + 1,head.y);
			break;
		}
		this.list.add(tail);
	}
	,__class__: Player
};
var Block = function(x,y) {
	this.div = window.document.createElement("div");
	this.div.style.position = "absolute";
	this.div.style.width = "10px";
	this.div.style.height = "10px";
	this.div.style.backgroundColor = "red";
	window.document.body.appendChild(this.div);
	this.set(x,y);
};
Block.__name__ = true;
Block.prototype = {
	set: function(x,y) {
		this.x = x;
		this.y = y;
		this.div.style.left = x * 10 + "px";
		this.div.style.top = y * 10 + "px";
	}
	,__class__: Block
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Playground = function() { };
Playground.__name__ = true;
Playground.main = function() {
	var url = tink__$Url_Url_$Impl_$.fromString(window.location.href);
	var _this = tink_url__$Query_Query_$Impl_$.toMap(url.query);
	var _g = __map_reserved["id"] != null ? _this.getReserved("id") : _this.h["id"];
	if(_g == null) {
		Playground.runHost();
	} else {
		var v = _g;
		Playground.runGuest(tink_url__$Portion_Portion_$Impl_$.stringly(v));
	}
};
Playground.runHost = function() {
	var id = "why-duplex-" + Std.random(268435456);
	var opt = { id : id, key : "lwjd5qra8257b9"};
	exp_rtg_Host.create(function() {
		return why_duplex_peerjs_PeerJsServer.bind(opt);
	},function(v) {
		return true;
	}).handle(function(o) {
		switch(o._hx_index) {
		case 0:
			var host = o.data;
			console.log("src/Playground.hx:26:","host running. id = " + id);
			var url = window.location.href + ("?id=" + id);
			tink_core__$Promise_Promise_$Impl_$.next(tink_core__$Promise_Promise_$Impl_$.next(new why_qrcode_encoder_JsEncoder("L").encode(url),function(data) {
				return new why_qrcode_printer_DataUrlPrinter().print(data);
			}),function(v1) {
				var a = window.document.createElement("a");
				a.href = url;
				a.target = "_blank";
				var img = window.document.createElement("img");
				img.src = v1;
				img.style.position = "absolute";
				img.style.opacity = "0.3";
				a.appendChild(img);
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(window.document.body.appendChild(a))));
			}).handle(function(o1) {
				console.log("src/Playground.hx:44:",o1);
				return;
			});
			host.rooms.created.listen(function(room) {
				var game = new Game();
				console.log("src/Playground.hx:48:","room " + room.id + " created");
				room.guests.connected.listen(function(guest) {
					console.log("src/Playground.hx:50:","guest " + guest.id + " connected");
					var player = game.addPlayer();
					tink_core__$Signal_Signal_$Impl_$.map(guest.data,function(chunk) {
						return new tink_json_Parser1().tryParse(chunk.toString());
					}).listen(function(o2) {
						switch(o2._hx_index) {
						case 0:
							var dir = o2.data.dir;
							player.dir = dir;
							break;
						case 1:
							var e = o2.failure;
							console.log("src/Playground.hx:56:",e);
							break;
						}
					});
					guest.disconnected.handle(function(o3) {
						console.log("src/Playground.hx:60:","guest " + guest.id + " disconnected, error: " + Std.string(o3));
						game.removePlayer(player);
					});
				});
			});
			host.rooms.create("default");
			break;
		case 1:
			var e1 = o.failure;
			console.log("src/Playground.hx:68:",e1);
			break;
		}
	});
};
Playground.runGuest = function(id) {
	var opt = { id : id, key : "lwjd5qra8257b9"};
	exp_rtg_Guest.connect(function() {
		return why_duplex_peerjs_PeerJsClient.connect(opt);
	}).handle(function(o) {
		switch(o._hx_index) {
		case 0:
			var guest = o.data;
			console.log("src/Playground.hx:75:","connected to host");
			guest.joinRoom(0).handle(function(o1) {
				switch(o1._hx_index) {
				case 0:
					var seat = o1.data;
					console.log("src/Playground.hx:78:","joined room");
					seat.data.listen(function(o2) {
						console.log("src/Playground.hx:79:",o2.toString());
					});
					var addButton = function(text,value) {
						var button = window.document.createElement("button");
						button.innerText = text;
						button.onclick = function() {
							var addButton1 = tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(new tink_json_Writer3().write(Command.SetDirection(value))));
							seat.send(addButton1);
						};
						window.document.body.appendChild(button);
					};
					addButton("Right",3);
					addButton("Left",2);
					addButton("Down",1);
					addButton("Up",0);
					break;
				case 1:
					var e = o1.failure;
					console.log("src/Playground.hx:94:",e);
					break;
				}
			});
			break;
		case 1:
			var e1 = o.failure;
			console.log("src/Playground.hx:97:",e1);
			break;
		}
	});
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var exp_rtg_Guest = function(client) {
	this.client = client;
	this.disconnected = client.disconnected;
	this.data = tink_core__$Signal_Signal_$Impl_$.map(client.data,function(v) {
		return new tink_json_Parser2().tryParse(v.toString());
	});
};
exp_rtg_Guest.__name__ = true;
exp_rtg_Guest.connect = function(createClient) {
	return tink_core__$Promise_Promise_$Impl_$.next(createClient(),tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(client) {
		return new exp_rtg_Guest(client);
	}));
};
exp_rtg_Guest.prototype = {
	joinRoom: function(id) {
		var _gthis = this;
		var message = exp_rtg_message_Uplink.Metadata(exp_rtg_message_UplinkMeta.JoinRoom(id));
		return tink_core__$Promise_Promise_$Impl_$.next(this.client.send(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(new tink_json_Writer2().write(message)))),function(_) {
			return tink_core__$Future_Future_$Impl_$.first(tink_core__$Signal_Signal_$Impl_$.nextTime(tink_core__$Signal_Signal_$Impl_$.select(_gthis.data,function(v) {
				if(v._hx_index == 0) {
					var _g = v.data;
					if(_g._hx_index == 0) {
						var _g1 = _g.v;
						switch(_g1._hx_index) {
						case 1:
							var type = _g1.type;
							var as = _g1.gid;
							var i = _g1.id;
							if(i == id) {
								return haxe_ds_Option.Some(tink_core_Outcome.Success(new exp_rtg_RawSeat(as,{ id : id, type : type},_gthis)));
							} else {
								return haxe_ds_Option.None;
							}
							break;
						case 6:
							var reason = _g1.reason;
							var i1 = _g1.id;
							if(i1 == id) {
								return haxe_ds_Option.Some(tink_core_Outcome.Failure(new tink_core_TypedError(null,$hxEnums[reason.__enum__].__constructs__[reason._hx_index],{ fileName : "exp/rtg/Guest.hx", lineNumber : 44, className : "exp.rtg.Guest", methodName : "joinRoom"})));
							} else {
								return haxe_ds_Option.None;
							}
							break;
						default:
							return haxe_ds_Option.None;
						}
					} else {
						return haxe_ds_Option.None;
					}
				} else {
					return haxe_ds_Option.None;
				}
			})),tink_core__$Future_Future_$Impl_$.delay(10000,new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(null,"Timed out when joining room \"" + id + "\"",{ fileName : "exp/rtg/Guest.hx", lineNumber : 47, className : "exp.rtg.Guest", methodName : "joinRoom"})))));
		});
	}
	,__class__: exp_rtg_Guest
};
var exp_rtg_RawSeat = function(id,room,guest) {
	var _gthis = this;
	this.id = id;
	this.room = room;
	this.guest = guest;
	this.data = tink_core__$Signal_Signal_$Impl_$.select(guest.data,function(o) {
		if(o._hx_index == 0) {
			var _g = o.data;
			if(_g._hx_index == 1) {
				var data = _g.v;
				var id1 = _g.roomId;
				if(id1 == room.id) {
					return haxe_ds_Option.Some(data);
				} else {
					return haxe_ds_Option.None;
				}
			} else {
				return haxe_ds_Option.None;
			}
		} else {
			return haxe_ds_Option.None;
		}
	});
};
exp_rtg_RawSeat.__name__ = true;
exp_rtg_RawSeat.prototype = {
	send: function(data) {
		var message = exp_rtg_message_Uplink.Data(this.room.id,data);
		return this.guest.client.send(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(new tink_json_Writer2().write(message))));
	}
	,__class__: exp_rtg_RawSeat
};
var exp_rtg_Host = function(roomTypeSupported,server) {
	var _gthis = this;
	this.rooms = new exp_rtg_Rooms();
	server.connected.listen(function(client) {
		var guest = new exp_rtg_HostGuest(client);
		return guest.data.listen(function(command) {
			switch(command._hx_index) {
			case 0:
				var _g = command.data;
				switch(_g._hx_index) {
				case 0:
					var _g3 = _g.v;
					switch(_g3._hx_index) {
					case 0:
						var type = _g3.type;
						if(roomTypeSupported(type)) {
							var room = _gthis.rooms.create(type);
							guest.send(exp_rtg_message_Downlink.Metadata(exp_rtg_message_DownlinkMeta.RoomCreated(room.id,type)));
						} else {
							guest.send(exp_rtg_message_Downlink.Metadata(exp_rtg_message_DownlinkMeta.RoomCreateFailed(type,exp_rtg_message_RoomCreateFailReason.UnsupportedType)));
						}
						break;
					case 1:
						var id = _g3.id;
						var _g1 = tink_state__$Observable_Observable_$Impl_$.get_value(_gthis.rooms.map.observe(id));
						if(_g1 == null) {
							guest.send(exp_rtg_message_Downlink.Metadata(exp_rtg_message_DownlinkMeta.RoomJoinFailed(id,exp_rtg_message_RoomJoinFailReason.NotExist)));
						} else {
							var room1 = _g1;
							var roomGuest = new exp_rtg_RoomGuest(guest,room1);
							var _this = room1.guests.array;
							_this.insertMany(_this.items.length,[roomGuest]);
							roomGuest.disconnected.handle(function(_) {
								return room1.guests.remove(roomGuest.id);
							});
							guest.send(exp_rtg_message_Downlink.Metadata(exp_rtg_message_DownlinkMeta.RoomJoined(id,roomGuest.id,room1.type)));
						}
						break;
					case 2:
						var as = _g3.gid;
						var id1 = _g3.id;
						var _g2 = tink_state__$Observable_Observable_$Impl_$.get_value(_gthis.rooms.map.observe(id1));
						if(_g2 == null) {
							guest.send(exp_rtg_message_Downlink.Metadata(exp_rtg_message_DownlinkMeta.RoomRejoinFailed(id1,as,exp_rtg_message_RoomRejoinFailReason.NotExist)));
						} else {
							var room2 = _g2;
							var _g4 = room2.pendingRejoin.h[as];
							if(_g4 == null) {
								guest.send(exp_rtg_message_Downlink.Metadata(exp_rtg_message_DownlinkMeta.RoomRejoinFailed(id1,as,exp_rtg_message_RoomRejoinFailReason.NotExist)));
							} else {
								var slot = _g4;
								slot.trigger(tink_core_Outcome.Success(new exp_rtg_RoomGuest(guest,room2,as)));
								guest.send(exp_rtg_message_Downlink.Metadata(exp_rtg_message_DownlinkMeta.RoomRejoined(id1,as,room2.type)));
							}
						}
						break;
					case 3:
						var id2 = _g3.id;
						var _g5 = tink_state__$Observable_Observable_$Impl_$.get_value(_gthis.rooms.map.observe(id2));
						if(_g5 == null) {
							guest.send(exp_rtg_message_Downlink.Metadata(exp_rtg_message_DownlinkMeta.RoomLeaveFailed(id2,exp_rtg_message_RoomLeaveFailReason.NotExist)));
						} else {
							var room3 = _g5;
							if(room3.guests.remove(id2)) {
								guest.send(exp_rtg_message_Downlink.Metadata(exp_rtg_message_DownlinkMeta.RoomLeft(id2)));
							} else {
								guest.send(exp_rtg_message_Downlink.Metadata(exp_rtg_message_DownlinkMeta.RoomLeaveFailed(id2,exp_rtg_message_RoomLeaveFailReason.NotJoined)));
							}
						}
						break;
					case 4:
						var id3 = _g3.id;
						var _g6 = tink_state__$Observable_Observable_$Impl_$.get_value(_gthis.rooms.map.observe(id3));
						if(_g6 == null) {
							guest.send(exp_rtg_message_Downlink.Metadata(exp_rtg_message_DownlinkMeta.RoomCloseFailed(id3,exp_rtg_message_RoomCloseFailReason.NotExist)));
						} else {
							var room4 = _g6;
							room4.close();
						}
						break;
					}
					break;
				case 1:
					var data = _g.v;
					var id4 = _g.roomId;
					break;
				}
				break;
			case 1:
				var e = command.failure;
				break;
			}
		});
	});
};
exp_rtg_Host.__name__ = true;
exp_rtg_Host.create = function(createServer,roomTypeSupported) {
	var f = function(roomTypeSupported1,server) {
		return new exp_rtg_Host(roomTypeSupported1,server);
	};
	var roomTypeSupported2 = roomTypeSupported;
	var tmp = function(server1) {
		return f(roomTypeSupported2,server1);
	};
	return tink_core__$Promise_Promise_$Impl_$.next(createServer(),tink_core__$Promise_Next_$Impl_$.ofSafeSync(tmp));
};
exp_rtg_Host.prototype = {
	__class__: exp_rtg_Host
};
var exp_rtg_Room = function(type) {
	this.guestIds = 0;
	this.id = exp_rtg_Room.ids++;
	this.type = type;
	this.guests = new exp_rtg_RoomGuests();
	this.pendingRejoin = new haxe_ds_IntMap();
};
exp_rtg_Room.__name__ = true;
exp_rtg_Room.prototype = {
	close: function() {
		this._broadcast(exp_rtg_message_Downlink.Metadata(exp_rtg_message_DownlinkMeta.RoomClosed(this.id)));
	}
	,_broadcast: function(message) {
		var serialized = new tink_json_Writer0().write(message);
		var guest = this.guests.array.values();
		while(guest.hasNext()) {
			var guest1 = guest.next();
			guest1.guest.client.send(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(serialized)));
		}
	}
	,__class__: exp_rtg_Room
};
var exp_rtg_Rooms = function() {
	this.map = new tink_state_ObservableMap(new haxe_ds_IntMap());
	var _gthis = this;
	var this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return _gthis.map.changes.listen(function(change) {
			var _g2 = change.to;
			var _g = change.key;
			if(change.from._hx_index == 1) {
				if(_g2._hx_index == 0) {
					var v = _g2.v;
					tink_core__$Callback_Callback_$Impl_$.invoke(cb,v);
				}
			}
			return;
		});
	});
	this.created = this1;
};
exp_rtg_Rooms.__name__ = true;
exp_rtg_Rooms.prototype = {
	create: function(type) {
		var room = new exp_rtg_Room(type);
		this.map.set(room.id,room);
		return room;
	}
	,__class__: exp_rtg_Rooms
};
var exp_rtg_RoomGuests = function() {
	this.array = new tink_state_ObservableArray();
	var _gthis = this;
	var this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return _gthis.array.changes.listen(function(change) {
			if(change._hx_index == 1) {
				var values = change.values;
				var index = change.index;
				var _g = 0;
				while(_g < values.length) {
					var v = values[_g];
					++_g;
					tink_core__$Callback_Callback_$Impl_$.invoke(cb,v);
				}
			}
			return;
		});
	});
	this.connected = this1;
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb1) {
		return _gthis.array.changes.listen(function(change1) {
			if(change1._hx_index == 0) {
				var values1 = change1.values;
				var index1 = change1.index;
				var _g1 = 0;
				while(_g1 < values1.length) {
					var v1 = values1[_g1];
					++_g1;
					tink_core__$Callback_Callback_$Impl_$.invoke(cb1,v1);
				}
			}
			return;
		});
	});
	this.disconnected = this2;
};
exp_rtg_RoomGuests.__name__ = true;
exp_rtg_RoomGuests.prototype = {
	remove: function(id) {
		var guest = this.array.values();
		while(guest.hasNext()) {
			var guest1 = guest.next();
			if(guest1.id == id) {
				this.array.remove(guest1);
				return true;
			}
		}
		return false;
	}
	,__class__: exp_rtg_RoomGuests
};
var exp_rtg_HostGuest = function(client) {
	this.client = client;
	this.disconnected = client.disconnected;
	this.data = tink_core__$Signal_Signal_$Impl_$.map(client.data,function(v) {
		return new tink_json_Parser0().tryParse(v.toString());
	});
};
exp_rtg_HostGuest.__name__ = true;
exp_rtg_HostGuest.prototype = {
	send: function(message) {
		return this.client.send(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(new tink_json_Writer0().write(message))));
	}
	,__class__: exp_rtg_HostGuest
};
var exp_rtg_RoomGuest = function(guest,room,id) {
	var _gthis = this;
	this.room = room;
	this.guest = guest;
	this.id = id == null ? room.guestIds++ : id;
	this.disconnected = guest.disconnected;
	this.data = tink_core__$Signal_Signal_$Impl_$.select(guest.data,function(v) {
		if(v._hx_index == 0) {
			var _g = v.data;
			if(_g._hx_index == 1) {
				var data = _g.v;
				var id1 = _g.roomId;
				if(id1 == room.id) {
					return haxe_ds_Option.Some(data);
				} else {
					return haxe_ds_Option.None;
				}
			} else {
				return haxe_ds_Option.None;
			}
		} else {
			return haxe_ds_Option.None;
		}
	});
};
exp_rtg_RoomGuest.__name__ = true;
exp_rtg_RoomGuest.prototype = {
	__class__: exp_rtg_RoomGuest
};
var exp_rtg_message_Downlink = $hxEnums["exp.rtg.message.Downlink"] = { __ename__ : true, __constructs__ : ["Metadata","Data"]
	,Metadata: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"exp.rtg.message.Downlink",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Data: ($_=function(roomId,v) { return {_hx_index:1,roomId:roomId,v:v,__enum__:"exp.rtg.message.Downlink",toString:$estr}; },$_.__params__ = ["roomId","v"],$_)
};
var exp_rtg_message_DownlinkMeta = $hxEnums["exp.rtg.message.DownlinkMeta"] = { __ename__ : true, __constructs__ : ["RoomCreated","RoomJoined","RoomRejoined","RoomLeft","RoomClosed","RoomCreateFailed","RoomJoinFailed","RoomRejoinFailed","RoomLeaveFailed","RoomCloseFailed"]
	,RoomCreated: ($_=function(id,type) { return {_hx_index:0,id:id,type:type,__enum__:"exp.rtg.message.DownlinkMeta",toString:$estr}; },$_.__params__ = ["id","type"],$_)
	,RoomJoined: ($_=function(id,gid,type) { return {_hx_index:1,id:id,gid:gid,type:type,__enum__:"exp.rtg.message.DownlinkMeta",toString:$estr}; },$_.__params__ = ["id","gid","type"],$_)
	,RoomRejoined: ($_=function(id,gid,type) { return {_hx_index:2,id:id,gid:gid,type:type,__enum__:"exp.rtg.message.DownlinkMeta",toString:$estr}; },$_.__params__ = ["id","gid","type"],$_)
	,RoomLeft: ($_=function(id) { return {_hx_index:3,id:id,__enum__:"exp.rtg.message.DownlinkMeta",toString:$estr}; },$_.__params__ = ["id"],$_)
	,RoomClosed: ($_=function(id) { return {_hx_index:4,id:id,__enum__:"exp.rtg.message.DownlinkMeta",toString:$estr}; },$_.__params__ = ["id"],$_)
	,RoomCreateFailed: ($_=function(type,reason) { return {_hx_index:5,type:type,reason:reason,__enum__:"exp.rtg.message.DownlinkMeta",toString:$estr}; },$_.__params__ = ["type","reason"],$_)
	,RoomJoinFailed: ($_=function(id,reason) { return {_hx_index:6,id:id,reason:reason,__enum__:"exp.rtg.message.DownlinkMeta",toString:$estr}; },$_.__params__ = ["id","reason"],$_)
	,RoomRejoinFailed: ($_=function(id,gid,reason) { return {_hx_index:7,id:id,gid:gid,reason:reason,__enum__:"exp.rtg.message.DownlinkMeta",toString:$estr}; },$_.__params__ = ["id","gid","reason"],$_)
	,RoomLeaveFailed: ($_=function(id,reason) { return {_hx_index:8,id:id,reason:reason,__enum__:"exp.rtg.message.DownlinkMeta",toString:$estr}; },$_.__params__ = ["id","reason"],$_)
	,RoomCloseFailed: ($_=function(id,reason) { return {_hx_index:9,id:id,reason:reason,__enum__:"exp.rtg.message.DownlinkMeta",toString:$estr}; },$_.__params__ = ["id","reason"],$_)
};
var exp_rtg_message_RoomCreateFailReason = $hxEnums["exp.rtg.message.RoomCreateFailReason"] = { __ename__ : true, __constructs__ : ["UnsupportedType"]
	,UnsupportedType: {_hx_index:0,__enum__:"exp.rtg.message.RoomCreateFailReason",toString:$estr}
};
var exp_rtg_message_RoomJoinFailReason = $hxEnums["exp.rtg.message.RoomJoinFailReason"] = { __ename__ : true, __constructs__ : ["NotExist"]
	,NotExist: {_hx_index:0,__enum__:"exp.rtg.message.RoomJoinFailReason",toString:$estr}
};
var exp_rtg_message_RoomRejoinFailReason = $hxEnums["exp.rtg.message.RoomRejoinFailReason"] = { __ename__ : true, __constructs__ : ["NotExist"]
	,NotExist: {_hx_index:0,__enum__:"exp.rtg.message.RoomRejoinFailReason",toString:$estr}
};
var exp_rtg_message_RoomLeaveFailReason = $hxEnums["exp.rtg.message.RoomLeaveFailReason"] = { __ename__ : true, __constructs__ : ["NotExist","NotJoined"]
	,NotExist: {_hx_index:0,__enum__:"exp.rtg.message.RoomLeaveFailReason",toString:$estr}
	,NotJoined: {_hx_index:1,__enum__:"exp.rtg.message.RoomLeaveFailReason",toString:$estr}
};
var exp_rtg_message_RoomCloseFailReason = $hxEnums["exp.rtg.message.RoomCloseFailReason"] = { __ename__ : true, __constructs__ : ["NotExist","NotHost"]
	,NotExist: {_hx_index:0,__enum__:"exp.rtg.message.RoomCloseFailReason",toString:$estr}
	,NotHost: {_hx_index:1,__enum__:"exp.rtg.message.RoomCloseFailReason",toString:$estr}
};
var exp_rtg_message_Uplink = $hxEnums["exp.rtg.message.Uplink"] = { __ename__ : true, __constructs__ : ["Metadata","Data"]
	,Metadata: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"exp.rtg.message.Uplink",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Data: ($_=function(roomId,v) { return {_hx_index:1,roomId:roomId,v:v,__enum__:"exp.rtg.message.Uplink",toString:$estr}; },$_.__params__ = ["roomId","v"],$_)
};
var exp_rtg_message_UplinkMeta = $hxEnums["exp.rtg.message.UplinkMeta"] = { __ename__ : true, __constructs__ : ["CreateRoom","JoinRoom","RejoinRoom","LeaveRoom","CloseRoom"]
	,CreateRoom: ($_=function(type) { return {_hx_index:0,type:type,__enum__:"exp.rtg.message.UplinkMeta",toString:$estr}; },$_.__params__ = ["type"],$_)
	,JoinRoom: ($_=function(id) { return {_hx_index:1,id:id,__enum__:"exp.rtg.message.UplinkMeta",toString:$estr}; },$_.__params__ = ["id"],$_)
	,RejoinRoom: ($_=function(id,gid) { return {_hx_index:2,id:id,gid:gid,__enum__:"exp.rtg.message.UplinkMeta",toString:$estr}; },$_.__params__ = ["id","gid"],$_)
	,LeaveRoom: ($_=function(id) { return {_hx_index:3,id:id,__enum__:"exp.rtg.message.UplinkMeta",toString:$estr}; },$_.__params__ = ["id"],$_)
	,CloseRoom: ($_=function(id) { return {_hx_index:4,id:id,__enum__:"exp.rtg.message.UplinkMeta",toString:$estr}; },$_.__params__ = ["id"],$_)
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) (this.h.hasOwnProperty(key) ? a.push(key | 0) : null);
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += i1 == null ? "null" : "" + i1;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,last: function() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = true;
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var keys = this.arrayKeys();
		var _g = 0;
		var _g1 = keys.length;
		while(_g < _g1) {
			var i = _g++;
			var k = keys[i];
			s_b += k == null ? "null" : "" + k;
			s_b += " => ";
			s_b += Std.string(Std.string(__map_reserved[k] != null ? this.getReserved(k) : this.h[k]));
			if(i < keys.length - 1) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = true;
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var tink_chunk_ChunkBase = function() { };
tink_chunk_ChunkBase.__name__ = true;
var tink__$Chunk_EmptyChunk = function() {
};
tink__$Chunk_EmptyChunk.__name__ = true;
tink__$Chunk_EmptyChunk.__super__ = tink_chunk_ChunkBase;
tink__$Chunk_EmptyChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	toString: function() {
		return "";
	}
	,toBytes: function() {
		return tink__$Chunk_EmptyChunk.EMPTY;
	}
	,__class__: tink__$Chunk_EmptyChunk
});
var tink__$Chunk_Chunk_$Impl_$ = {};
tink__$Chunk_Chunk_$Impl_$.__name__ = true;
var tink__$Url_Url_$Impl_$ = {};
tink__$Url_Url_$Impl_$.__name__ = true;
tink__$Url_Url_$Impl_$.fromString = function(s) {
	return tink__$Url_Url_$Impl_$.parse(s);
};
tink__$Url_Url_$Impl_$.noop = function(_) {
};
tink__$Url_Url_$Impl_$.parse = function(s,onError) {
	if(s == null) {
		return tink__$Url_Url_$Impl_$.parse("");
	}
	if(onError == null) {
		onError = tink__$Url_Url_$Impl_$.noop;
	}
	s = StringTools.trim(s);
	if(StringTools.startsWith(s,"data:")) {
		var this1 = { scheme : "data", payload : HxOverrides.substr(s,5,null)};
		return this1;
	}
	var FORMAT = new EReg("^(([a-zA-Z][a-zA-Z0-9\\-+.]*):)?((//(([^@/]+)@)?([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?)$","");
	var HOST = new EReg("^(\\[(.*)\\]|([^:]*))(:(.*))?$","");
	FORMAT.match(s);
	var hosts;
	var _g = FORMAT.matched(7);
	if(_g == null) {
		hosts = [];
	} else {
		var v = _g;
		var _g1 = [];
		var _g11 = 0;
		var _g2 = v.split(",");
		while(_g11 < _g2.length) {
			var host = _g2[_g11];
			++_g11;
			HOST.match(host);
			var host1;
			var _g12 = HOST.matched(2);
			var _g21 = HOST.matched(3);
			if(_g12 == null) {
				var ipv4 = _g21;
				host1 = ipv4;
			} else if(_g21 == null) {
				var ipv6 = _g12;
				host1 = "[" + ipv6 + "]";
			} else {
				onError("invalid host " + host);
				host1 = null;
			}
			var port;
			var _g3 = HOST.matched(5);
			if(_g3 == null) {
				port = null;
			} else {
				var v1 = _g3;
				var _g31 = Std.parseInt(v1);
				if(_g31 == null) {
					onError("invalid port " + v1);
					port = null;
				} else {
					var p = _g31;
					port = p;
				}
			}
			_g1.push(tink_url__$Host_Host_$Impl_$._new(host1,port));
		}
		hosts = _g1;
	}
	var path = FORMAT.matched(8);
	if(hosts.length > 0 && path.charAt(0) != "/") {
		path = "/" + path;
	}
	var this2 = { scheme : FORMAT.matched(2), payload : FORMAT.matched(3), host : hosts[0], hosts : hosts, auth : FORMAT.matched(6), path : tink_url__$Path_Path_$Impl_$.ofString(path), query : FORMAT.matched(10), hash : FORMAT.matched(12)};
	return this2;
};
var tink_chunk_ByteChunk = function(data,from,to) {
	this.data = data;
	this.from = from;
	this.to = to;
};
tink_chunk_ByteChunk.__name__ = true;
tink_chunk_ByteChunk.of = function(b) {
	if(b.length == 0) {
		return tink__$Chunk_Chunk_$Impl_$.EMPTY;
	}
	var ret = new tink_chunk_ByteChunk(b.b.bufferValue,0,b.length);
	ret.wrapped = b;
	return ret;
};
tink_chunk_ByteChunk.__super__ = tink_chunk_ChunkBase;
tink_chunk_ByteChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	toBytes: function() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.sub(this.from,this.to - this.from);
	}
	,toString: function() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.getString(this.from,this.to - this.from);
	}
	,__class__: tink_chunk_ByteChunk
});
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
tink_core_Annex.__name__ = true;
tink_core_Annex.prototype = {
	__class__: tink_core_Annex
};
var tink_core__$Callback_Callback_$Impl_$ = {};
tink_core__$Callback_Callback_$Impl_$.__name__ = true;
tink_core__$Callback_Callback_$Impl_$.invoke = function(this1,data) {
	if(tink_core__$Callback_Callback_$Impl_$.depth < 500) {
		tink_core__$Callback_Callback_$Impl_$.depth++;
		this1(data);
		tink_core__$Callback_Callback_$Impl_$.depth--;
	} else {
		var _e = this1;
		var f = function(data1) {
			tink_core__$Callback_Callback_$Impl_$.invoke(_e,data1);
		};
		var data2 = data;
		tink_core__$Callback_Callback_$Impl_$.defer(function() {
			f(data2);
		});
	}
};
tink_core__$Callback_Callback_$Impl_$.fromNiladic = function(f) {
	return f;
};
tink_core__$Callback_Callback_$Impl_$.defer = function(f) {
	haxe_Timer.delay(f,0);
};
var tink_core__$Callback_CallbackLink_$Impl_$ = {};
tink_core__$Callback_CallbackLink_$Impl_$.__name__ = true;
tink_core__$Callback_CallbackLink_$Impl_$.noop = function() {
};
var tink_core_SimpleLink = function(f) {
	this.f = f;
};
tink_core_SimpleLink.__name__ = true;
tink_core_SimpleLink.prototype = {
	cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
	,__class__: tink_core_SimpleLink
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
tink_core__$Callback_LinkPair.__name__ = true;
tink_core__$Callback_LinkPair.prototype = {
	cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this2 = this.b;
			if(this2 != null) {
				this2.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw new js__$Boot_HaxeError("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.prototype = {
	cancel: function() {
		if(this.list != null) {
			var list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used < list.used >> 1) {
				list.compact();
			}
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core_CallbackList = function() {
	this.busy = false;
	this.queue = [];
	this.used = 0;
	this.cells = [];
};
tink_core_CallbackList.__name__ = true;
tink_core_CallbackList.prototype = {
	ondrain: function() {
	}
	,invoke: function(data,destructive) {
		if(this.busy) {
			var f = $bind(this,this.invoke);
			var data1 = data;
			var destructive1 = destructive;
			var tmp = function() {
				f(data1,destructive1);
				return;
			};
			this.queue.push(tmp);
		} else {
			this.busy = true;
			var length = this.cells.length;
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				var _this = this.cells[i];
				if(_this.list != null) {
					tink_core__$Callback_Callback_$Impl_$.invoke(_this.cb,data);
				}
			}
			this.busy = false;
			if(destructive) {
				var added = this.cells.length - length;
				var _g2 = 0;
				var _g3 = length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					var _this1 = this.cells[i1];
					_this1.cb = null;
					_this1.list = null;
				}
				var _g4 = 0;
				var _g5 = added;
				while(_g4 < _g5) {
					var i2 = _g4++;
					this.cells[i2] = this.cells[length + i2];
				}
				this.resize(added);
			} else if(this.used < this.cells.length) {
				this.compact();
			}
			if(this.queue.length > 0) {
				(this.queue.shift())();
			}
		}
	}
	,compact: function() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			this.ondrain();
		} else {
			var compacted = 0;
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = this.cells[i];
				var _g21 = _g2.list;
				if(_g2.cb != null) {
					var v = _g2;
					if(compacted != i) {
						this.cells[compacted] = v;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	,resize: function(length) {
		this.cells.length = length;
	}
	,__class__: tink_core_CallbackList
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = true;
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		var _g = tink_core_TypedError.asError(e1);
		var tmp;
		if(_g == null) {
			tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e1,pos) : report(e1);
		} else {
			var e2 = _g;
			tmp = e2;
		}
		return tink_core_Outcome.Failure(tmp);
	}
};
tink_core_TypedError.prototype = {
	printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,throwSelf: function() {
		var any = this;
		throw js__$Boot_HaxeError.wrap(any);
	}
	,__class__: tink_core_TypedError
};
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : true, __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = true;
tink_core__$Lazy_LazyConst.prototype = {
	get: function() {
		return this.value;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = true;
tink_core__$Future_SyncFuture.prototype = {
	map: function(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var tmp = _gthis.value.get();
			return f(tmp).handle($yield);
		});
	}
	,handle: function(cb) {
		tink_core__$Callback_Callback_$Impl_$.invoke(cb,this.value.get());
		return null;
	}
	,gather: function() {
		return this;
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core__$Future_Future_$Impl_$ = {};
tink_core__$Future_Future_$Impl_$.__name__ = true;
tink_core__$Future_Future_$Impl_$.first = function(this1,other) {
	var ret = new tink_core_FutureTrigger();
	var l1 = this1.handle($bind(ret,ret.trigger));
	var l2 = other.handle($bind(ret,ret.trigger));
	var ret1 = ret;
	if(l1 != null) {
		var this2 = l1;
		ret1.handle(function(_) {
			this2.cancel();
		});
	}
	if(l2 != null) {
		var this3 = l2;
		ret1.handle(function(_1) {
			this3.cancel();
		});
	}
	return ret1;
};
tink_core__$Future_Future_$Impl_$.flatten = function(f) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		var inner = null;
		var outer = f.handle(function(second) {
			inner = second.handle($yield);
		});
		var this1 = new tink_core_SimpleLink(function() {
			if(inner != null) {
				inner.cancel();
			}
		});
		return new tink_core__$Callback_LinkPair(outer,this1);
	});
};
tink_core__$Future_Future_$Impl_$.async = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(lazy) {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			f($yield);
			return null;
		});
	} else {
		var op = new tink_core_FutureTrigger();
		var wrapped = f;
		tink_core__$Callback_Callback_$Impl_$.invoke(wrapped,$bind(op,op.trigger));
		return op;
	}
};
tink_core__$Future_Future_$Impl_$.delay = function(ms,value) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		haxe_Timer.delay(function() {
			cb(value.get());
		},ms);
	});
};
var tink_core_FutureTrigger = function() {
	this.list = new tink_core_CallbackList();
};
tink_core_FutureTrigger.__name__ = true;
tink_core_FutureTrigger.prototype = {
	handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			var node = new tink_core__$Callback_ListCell(callback,v);
			v.cells.push(node);
			v.used++;
			return node;
		}
	}
	,map: function(f) {
		var _g = this.list;
		if(_g == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v1) {
				var node1 = f(v1);
				ret.trigger(node1);
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	,flatMap: function(f) {
		var _g = this.list;
		if(_g == null) {
			return f(this.result);
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			var _this = this.list;
			var node = new tink_core__$Callback_ListCell(function(v1) {
				f(v1).handle($bind(ret,ret.trigger));
			},_this);
			_this.cells.push(node);
			_this.used++;
			return ret;
		}
	}
	,gather: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			list.invoke(result,true);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core__$Future_SuspendableFuture = function(wakeup) {
	this.suspended = true;
	var _gthis = this;
	this.wakeup = wakeup;
	this.callbacks = new tink_core_CallbackList();
	this.callbacks.ondrain = function() {
		if(_gthis.callbacks != null) {
			_gthis.suspended = true;
			var this1 = _gthis.link;
			if(this1 != null) {
				this1.cancel();
			}
			_gthis.link = null;
		}
	};
};
tink_core__$Future_SuspendableFuture.__name__ = true;
tink_core__$Future_SuspendableFuture.prototype = {
	trigger: function(value) {
		var _g = this.callbacks;
		if(_g != null) {
			var list = _g;
			this.callbacks = null;
			this.suspended = false;
			this.result = value;
			this.link = null;
			this.wakeup = null;
			list.invoke(value,true);
		}
	}
	,handle: function(callback) {
		var _g = this.callbacks;
		if(_g == null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			var _this = this.callbacks;
			var node = new tink_core__$Callback_ListCell(callback,_this);
			_this.cells.push(node);
			_this.used++;
			var ret = node;
			if(this.suspended) {
				this.suspended = false;
				this.link = this.wakeup($bind(this,this.trigger));
			}
			return ret;
		}
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return _gthis.handle(function(res) {
				var tmp = f(res);
				$yield(tmp);
			});
		});
	}
	,flatMap: function(f) {
		return tink_core__$Future_Future_$Impl_$.flatten(this.map(f));
	}
	,gather: function() {
		return this;
	}
	,__class__: tink_core__$Future_SuspendableFuture
};
var tink_core__$Lazy_LazyFunc = function(f) {
	this.f = f;
};
tink_core__$Lazy_LazyFunc.__name__ = true;
tink_core__$Lazy_LazyFunc.prototype = {
	get: function() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var tmp = _gthis.get();
			return f(tmp);
		});
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
tink_core_NamedWith.__name__ = true;
tink_core_NamedWith.prototype = {
	__class__: tink_core_NamedWith
};
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : true, __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
tink_core_MPair.__name__ = true;
tink_core_MPair.prototype = {
	__class__: tink_core_MPair
};
var tink_core__$Promise_Promise_$Impl_$ = {};
tink_core__$Promise_Promise_$Impl_$.__name__ = true;
tink_core__$Promise_Promise_$Impl_$.next = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var gather1 = gather;
	if(gather1 == null) {
		gather1 = true;
	}
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	if(gather1) {
		return ret.gather();
	} else {
		return ret;
	}
};
var tink_core__$Promise_Next_$Impl_$ = {};
tink_core__$Promise_Next_$Impl_$.__name__ = true;
tink_core__$Promise_Next_$Impl_$.ofSafeSync = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
	};
};
var tink_core__$Signal_Signal_$Impl_$ = {};
tink_core__$Signal_Signal_$Impl_$.__name__ = true;
tink_core__$Signal_Signal_$Impl_$.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			var this3 = f(result);
			tink_core__$Callback_Callback_$Impl_$.invoke(cb,this3);
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.filter = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			if(f(result)) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,result);
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.select = function(this1,selector,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.listen(function(result) {
			var _g = selector(result);
			switch(_g._hx_index) {
			case 0:
				var v = _g.v;
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,v);
				break;
			case 1:
				break;
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.nextTime = function(this1,condition) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	var immediate = false;
	link = this1.listen(function(v) {
		if(condition == null || condition(v)) {
			ret.trigger(v);
			if(link == null) {
				immediate = true;
			} else if(link != null) {
				link.cancel();
			}
		}
	});
	if(immediate) {
		if(link != null) {
			link.cancel();
		}
	}
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.until = function(this1,end) {
	var ret = new tink_core__$Signal_Suspendable(function($yield) {
		var this2 = this1.listen($yield);
		if(this2 == null) {
			return tink_core__$Callback_CallbackLink_$Impl_$.noop;
		} else {
			return ($_=this2,$bind($_,$_.cancel));
		}
	});
	end.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic($bind(ret,ret.kill)));
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.gather = function(this1) {
	var ret = tink_core__$Signal_Signal_$Impl_$.trigger();
	this1.listen(function(x) {
		ret.handlers.invoke(x);
	});
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.trigger = function() {
	return new tink_core_SignalTrigger();
};
var tink_core__$Signal_SimpleSignal = function(f) {
	this.f = f;
};
tink_core__$Signal_SimpleSignal.__name__ = true;
tink_core__$Signal_SimpleSignal.prototype = {
	listen: function(cb) {
		return this.f(cb);
	}
	,__class__: tink_core__$Signal_SimpleSignal
};
var tink_core__$Signal_Suspendable = function(activate) {
	this.killed = false;
	this.trigger = new tink_core_SignalTrigger();
	this.activate = activate;
};
tink_core__$Signal_Suspendable.__name__ = true;
tink_core__$Signal_Suspendable.prototype = {
	kill: function() {
		if(!this.killed) {
			this.killed = true;
			this.trigger = null;
		}
	}
	,listen: function(cb) {
		var _gthis = this;
		if(this.killed) {
			return null;
		}
		if(this.trigger.handlers.used == 0) {
			this.suspend = this.activate(($_=this.trigger,$bind($_,$_.trigger)));
		}
		var _this = this.trigger.handlers;
		var node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		_this.used++;
		var this1 = new tink_core_SimpleLink(function() {
			if(_gthis.trigger.handlers.used == 0) {
				_gthis.suspend();
				_gthis.suspend = null;
			}
		});
		return new tink_core__$Callback_LinkPair(node,this1);
	}
	,__class__: tink_core__$Signal_Suspendable
};
var tink_core_SignalTrigger = function() {
	this.handlers = new tink_core_CallbackList();
};
tink_core_SignalTrigger.__name__ = true;
tink_core_SignalTrigger.prototype = {
	trigger: function(event) {
		this.handlers.invoke(event);
	}
	,listen: function(cb) {
		var _this = this.handlers;
		var node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		_this.used++;
		return node;
	}
	,__class__: tink_core_SignalTrigger
};
var tink_json__$Parser_SliceData = function(source,min,max) {
	this.source = source;
	this.min = min;
	this.max = max;
};
tink_json__$Parser_SliceData.__name__ = true;
tink_json__$Parser_SliceData.prototype = {
	__class__: tink_json__$Parser_SliceData
};
var tink_json__$Parser_JsonString_$Impl_$ = {};
tink_json__$Parser_JsonString_$Impl_$.__name__ = true;
tink_json__$Parser_JsonString_$Impl_$.contains = function(this1,s) {
	var _g = this1.source.indexOf(s,this1.min);
	if(_g == -1) {
		return false;
	} else {
		var outside = _g;
		if(outside > this1.max) {
			return false;
		} else {
			var v = _g;
			return true;
		}
	}
};
tink_json__$Parser_JsonString_$Impl_$.toString = function(this1) {
	if(tink_json__$Parser_JsonString_$Impl_$.contains(this1,"\\")) {
		return JSON.parse(this1.source.substring(this1.min - 1,this1.max + 1));
	} else {
		return this1.source.substring(this1.min,this1.max);
	}
};
var tink_json_BasicParser = function() {
	this.plugins = new tink_core_Annex(this);
};
tink_json_BasicParser.__name__ = true;
tink_json_BasicParser.prototype = {
	init: function(source) {
		this.source = source;
		this.pos = 0;
		this.max = source.length;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
	}
	,parseString: function() {
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var e;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 34) {
			this.pos += 1;
			e = true;
		} else {
			e = false;
		}
		var e1 = !e ? this.die("Expected string") : null;
		return this.parseRestOfString();
	}
	,parseRestOfString: function() {
		return this.slice(this.skipString(),this.pos - 1);
	}
	,skipString: function() {
		var start = this.pos;
		while(true) {
			var _g = this.source.indexOf("\"",this.pos);
			if(_g == -1) {
				this.die("unterminated string",start);
			} else {
				var v = _g;
				this.pos = v + 1;
				var p = this.pos - 2;
				while(this.source.charCodeAt(p) == 92) --p;
				if((p - this.pos & 1) == 0) {
					break;
				}
			}
		}
		return start;
	}
	,parseNumber: function() {
		var char = this.source.charCodeAt(this.pos);
		if(char == 46 || char == 45 || char < 58 && char > 47) {
			return this.doParseNumber();
		} else {
			return this.die("number expected");
		}
	}
	,doParseNumber: function() {
		return this.slice(this.skipNumber(this.source.charCodeAt(this.pos++)),this.pos);
	}
	,invalidNumber: function(start) {
		return this.die("Invalid number " + this.source.substring(start,this.pos),start);
	}
	,skipNumber: function(c) {
		var start = this.pos - 1;
		var minus = c == 45;
		var digit = !minus;
		var zero = c == 48;
		var point = false;
		var e = false;
		var pm = false;
		var end = false;
		while(true) {
			c = this.source.charCodeAt(this.pos++);
			switch(c) {
			case 43:case 45:
				if(!e || pm) {
					this.invalidNumber(start);
				}
				digit = false;
				pm = true;
				break;
			case 46:
				if(minus || point) {
					this.invalidNumber(start);
				}
				digit = false;
				point = true;
				break;
			case 48:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
					zero = true;
				}
				digit = true;
				break;
			case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
				}
				digit = true;
				zero = false;
				break;
			case 69:case 101:
				if(minus || zero || e) {
					this.invalidNumber(start);
				}
				digit = false;
				e = true;
				break;
			default:
				if(!digit) {
					this.invalidNumber(start);
				}
				this.pos--;
				end = true;
			}
			if(end) {
				break;
			}
		}
		return start;
	}
	,slice: function(from,to) {
		return new tink_json__$Parser_SliceData(this.source,from,to);
	}
	,skipArray: function() {
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			return;
		}
		while(true) {
			this.skipValue();
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp1;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				break;
			}
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp2;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
			this.pos += 1;
			tmp2 = true;
		} else {
			tmp2 = false;
		}
		if(!tmp2) {
			this.die("Expected ]");
		}
	}
	,skipValue: function() {
		var _gthis = this;
		var _g = this.source.charCodeAt(this.pos++);
		switch(_g) {
		case 34:
			this.skipString();
			break;
		case 91:
			this.skipArray();
			break;
		case 102:
			var tmp;
			if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 97 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 115 && this.source.charCodeAt(this.pos + 3) == 101) {
				this.pos += 4;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.die("Expected alse");
			}
			break;
		case 110:
			var tmp1;
			if(this.max > this.pos + 2 && this.source.charCodeAt(this.pos) == 117 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 108) {
				this.pos += 3;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				this.die("Expected ull");
			}
			break;
		case 116:
			var tmp2;
			if(this.max > this.pos + 2 && this.source.charCodeAt(this.pos) == 114 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 101) {
				this.pos += 3;
				tmp2 = true;
			} else {
				tmp2 = false;
			}
			if(!tmp2) {
				this.die("Expected rue");
			}
			break;
		case 123:
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp3;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp3 = true;
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				return;
			}
			while(true) {
				if(_gthis.source.charCodeAt(_gthis.pos++) != 34) {
					_gthis.die("expected string",_gthis.pos - 1);
				}
				_gthis.skipString();
				while(_gthis.pos < _gthis.max && _gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
				var tmp4;
				if(_gthis.max > _gthis.pos && _gthis.source.charCodeAt(_gthis.pos) == 58) {
					_gthis.pos += 1;
					while(_gthis.pos < _gthis.max && _gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
					tmp4 = true;
				} else {
					tmp4 = false;
				}
				if(!tmp4) {
					_gthis.die("Expected :");
				}
				_gthis.skipValue();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp5;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp5 = true;
				} else {
					tmp5 = false;
				}
				if(!tmp5) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp6;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				tmp6 = true;
			} else {
				tmp6 = false;
			}
			if(!tmp6) {
				this.die("Expected }");
			}
			break;
		default:
			var char = _g;
			if(char == 46 || char == 45 || char < 58 && char > 47) {
				this.skipNumber(char);
			} else {
				this.invalidChar(char);
			}
		}
	}
	,invalidChar: function(c) {
		return this.die("invalid char " + StringTools.hex(c,2),this.pos - 1);
	}
	,die: function(s,pos,end) {
		if(pos == null) {
			pos = this.pos;
			end = pos;
		} else if(end == null) {
			end = this.pos;
		}
		if(end <= pos) {
			end = pos + 1;
		}
		var range = end > pos + 1 ? "characters " + pos + " - " + end : "character " + pos;
		var clip = function(s1,maxLength,left) {
			if(s1.length > maxLength) {
				if(left) {
					return "... " + HxOverrides.substr(s1,s1.length - maxLength,null);
				} else {
					return HxOverrides.substr(s1,0,maxLength) + " ...";
				}
			} else {
				return s1;
			}
		};
		var p = pos + end;
		var center = p >> 1;
		var context = clip(this.source.substring(0,pos),20,true) + "  ---->  " + clip(this.source.substring(pos,center),20,false) + clip(this.source.substring(center,end),20,true) + "  <----  " + clip(this.source.substring(end),20,false);
		return tink_core_TypedError.withData(422,s + (" at " + range + " in " + context),{ source : this.source, start : pos, end : end},{ fileName : "tink/json/Parser.hx", lineNumber : 354, className : "tink.json.BasicParser", methodName : "die"}).throwSelf();
	}
	,__class__: tink_json_BasicParser
};
var tink_json_Parser0 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser0.__name__ = true;
tink_json_Parser0.__super__ = tink_json_BasicParser;
tink_json_Parser0.prototype = $extend(tink_json_BasicParser.prototype,{
	parse0: function() {
		var __ret = this.parse1();
		var o = __ret.Metadata;
		if(o != null) {
			return exp_rtg_message_Uplink.Metadata(o.v);
		} else {
			var o1 = __ret.Data;
			if(o1 != null) {
				return exp_rtg_message_Uplink.Data(o1.roomId,o1.v);
			} else {
				throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Cannot process " + Std.string(__ret),{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 359, className : "tink.json.Parser0", methodName : "parse0"}));
			}
		}
	}
	,parse1: function() {
		var _gthis = this;
		var v_Data = null;
		var v_Metadata = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("Metadata".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "Metadata") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_Metadata1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_Metadata1 = true;
					} else {
						v_Metadata1 = false;
					}
					v_Metadata = v_Metadata1 ? null : this.parse3();
				} else if("Data".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "Data") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_Data1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_Data1 = true;
					} else {
						v_Data1 = false;
					}
					v_Data = v_Data1 ? null : this.parse2();
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { Data : v_Data, Metadata : v_Metadata};
	}
	,parse2: function() {
		var _gthis = this;
		var v_roomId = 0;
		var hasv_roomId = false;
		var v_v = null;
		var hasv_v = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("v".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "v") {
					var __start__1 = this.pos;
					var rep = haxe_crypto_Base64.decode(tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString()));
					try {
						var this1 = rep;
						v_v = tink_chunk_ByteChunk.of(tink_json__$Representation_Representation_$Impl_$.get(this1));
					} catch( e ) {
						v_v = this.die(Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e),__start__1);
					}
					hasv_v = true;
				} else if("roomId".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "roomId") {
					var this2 = this.parseNumber();
					v_roomId = Std.parseInt(this2.source.substring(this2.min,this2.max));
					hasv_roomId = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { roomId : hasv_roomId ? v_roomId : __missing__("roomId"), v : hasv_v ? v_v : __missing__("v")};
	}
	,parse3: function() {
		var _gthis = this;
		var v_v = null;
		var hasv_v = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("v".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "v") {
					v_v = this.parse4();
					hasv_v = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { v : hasv_v ? v_v : __missing__("v")};
	}
	,parse4: function() {
		var __ret = this.parse5();
		var o = __ret.CreateRoom;
		if(o != null) {
			return exp_rtg_message_UplinkMeta.CreateRoom(o.type);
		} else {
			var o1 = __ret.JoinRoom;
			if(o1 != null) {
				return exp_rtg_message_UplinkMeta.JoinRoom(o1.id);
			} else {
				var o2 = __ret.RejoinRoom;
				if(o2 != null) {
					return exp_rtg_message_UplinkMeta.RejoinRoom(o2.id,o2.gid);
				} else {
					var o3 = __ret.LeaveRoom;
					if(o3 != null) {
						return exp_rtg_message_UplinkMeta.LeaveRoom(o3.id);
					} else {
						var o4 = __ret.CloseRoom;
						if(o4 != null) {
							return exp_rtg_message_UplinkMeta.CloseRoom(o4.id);
						} else {
							throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Cannot process " + Std.string(__ret),{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 359, className : "tink.json.Parser0", methodName : "parse4"}));
						}
					}
				}
			}
		}
	}
	,parse5: function() {
		var _gthis = this;
		var v_CloseRoom = null;
		var v_CreateRoom = null;
		var v_JoinRoom = null;
		var v_LeaveRoom = null;
		var v_RejoinRoom = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("RejoinRoom".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "RejoinRoom") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_RejoinRoom1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_RejoinRoom1 = true;
					} else {
						v_RejoinRoom1 = false;
					}
					v_RejoinRoom = v_RejoinRoom1 ? null : this.parse8();
				} else if("LeaveRoom".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "LeaveRoom") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_LeaveRoom1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_LeaveRoom1 = true;
					} else {
						v_LeaveRoom1 = false;
					}
					v_LeaveRoom = v_LeaveRoom1 ? null : this.parse6();
				} else if("JoinRoom".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "JoinRoom") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_JoinRoom1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_JoinRoom1 = true;
					} else {
						v_JoinRoom1 = false;
					}
					v_JoinRoom = v_JoinRoom1 ? null : this.parse6();
				} else if("CreateRoom".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "CreateRoom") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_CreateRoom1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_CreateRoom1 = true;
					} else {
						v_CreateRoom1 = false;
					}
					v_CreateRoom = v_CreateRoom1 ? null : this.parse7();
				} else if("CloseRoom".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "CloseRoom") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_CloseRoom1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_CloseRoom1 = true;
					} else {
						v_CloseRoom1 = false;
					}
					v_CloseRoom = v_CloseRoom1 ? null : this.parse6();
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { CloseRoom : v_CloseRoom, CreateRoom : v_CreateRoom, JoinRoom : v_JoinRoom, LeaveRoom : v_LeaveRoom, RejoinRoom : v_RejoinRoom};
	}
	,parse6: function() {
		var _gthis = this;
		var v_id = 0;
		var hasv_id = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("id".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "id") {
					var this1 = this.parseNumber();
					v_id = Std.parseInt(this1.source.substring(this1.min,this1.max));
					hasv_id = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { id : hasv_id ? v_id : __missing__("id")};
	}
	,parse7: function() {
		var _gthis = this;
		var v_type = null;
		var hasv_type = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("type".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "type") {
					v_type = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					hasv_type = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { type : hasv_type ? v_type : __missing__("type")};
	}
	,parse8: function() {
		var _gthis = this;
		var v_gid = 0;
		var hasv_gid = false;
		var v_id = 0;
		var hasv_id = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("id".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "id") {
					var this1 = this.parseNumber();
					v_id = Std.parseInt(this1.source.substring(this1.min,this1.max));
					hasv_id = true;
				} else if("gid".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "gid") {
					var this2 = this.parseNumber();
					v_gid = Std.parseInt(this2.source.substring(this2.min,this2.max));
					hasv_gid = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { gid : hasv_gid ? v_gid : __missing__("gid"), id : hasv_id ? v_id : __missing__("id")};
	}
	,parse: function(source) {
		this.init(source);
		return this.parse0();
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			return _gthis.parse(source);
		},null,{ fileName : "tink/json/macros/Macro.hx", lineNumber : 93, className : "tink.json.Parser0", methodName : "tryParse"});
	}
	,__class__: tink_json_Parser0
});
var tink_json_Parser1 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser1.__name__ = true;
tink_json_Parser1.__super__ = tink_json_BasicParser;
tink_json_Parser1.prototype = $extend(tink_json_BasicParser.prototype,{
	parse0: function() {
		var __ret = this.parse1();
		var o = __ret.SetDirection;
		if(o != null) {
			return Command.SetDirection(o.dir);
		} else {
			throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Cannot process " + Std.string(__ret),{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 359, className : "tink.json.Parser1", methodName : "parse0"}));
		}
	}
	,parse1: function() {
		var _gthis = this;
		var v_SetDirection = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("SetDirection".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "SetDirection") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_SetDirection1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_SetDirection1 = true;
					} else {
						v_SetDirection1 = false;
					}
					v_SetDirection = v_SetDirection1 ? null : this.parse2();
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { SetDirection : v_SetDirection};
	}
	,parse2: function() {
		var _gthis = this;
		var v_dir = null;
		var hasv_dir = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("dir".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "dir") {
					var this1 = this.parseNumber();
					var v = Std.parseInt(this1.source.substring(this1.min,this1.max));
					switch(v) {
					case 0:case 1:case 2:case 3:
						v_dir = v;
						break;
					default:
						var list = [0,1,2,3];
						throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Unrecognized enum value: " + v + ". Accepted values are: " + new tink_json_Writer1().write(list),{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 385, className : "tink.json.Parser1", methodName : "parse2"}));
					}
					hasv_dir = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { dir : hasv_dir ? v_dir : __missing__("dir")};
	}
	,parse: function(source) {
		this.init(source);
		return this.parse0();
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			return _gthis.parse(source);
		},null,{ fileName : "tink/json/macros/Macro.hx", lineNumber : 93, className : "tink.json.Parser1", methodName : "tryParse"});
	}
	,__class__: tink_json_Parser1
});
var tink_json_Parser2 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser2.__name__ = true;
tink_json_Parser2.__super__ = tink_json_BasicParser;
tink_json_Parser2.prototype = $extend(tink_json_BasicParser.prototype,{
	parse0: function() {
		var __ret = this.parse1();
		var o = __ret.Metadata;
		if(o != null) {
			return exp_rtg_message_Downlink.Metadata(o.v);
		} else {
			var o1 = __ret.Data;
			if(o1 != null) {
				return exp_rtg_message_Downlink.Data(o1.roomId,o1.v);
			} else {
				throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Cannot process " + Std.string(__ret),{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 359, className : "tink.json.Parser2", methodName : "parse0"}));
			}
		}
	}
	,parse1: function() {
		var _gthis = this;
		var v_Data = null;
		var v_Metadata = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("Metadata".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "Metadata") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_Metadata1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_Metadata1 = true;
					} else {
						v_Metadata1 = false;
					}
					v_Metadata = v_Metadata1 ? null : this.parse3();
				} else if("Data".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "Data") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_Data1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_Data1 = true;
					} else {
						v_Data1 = false;
					}
					v_Data = v_Data1 ? null : this.parse2();
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { Data : v_Data, Metadata : v_Metadata};
	}
	,parse2: function() {
		var _gthis = this;
		var v_roomId = 0;
		var hasv_roomId = false;
		var v_v = null;
		var hasv_v = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("v".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "v") {
					var __start__1 = this.pos;
					var rep = haxe_crypto_Base64.decode(tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString()));
					try {
						var this1 = rep;
						v_v = tink_chunk_ByteChunk.of(tink_json__$Representation_Representation_$Impl_$.get(this1));
					} catch( e ) {
						v_v = this.die(Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e),__start__1);
					}
					hasv_v = true;
				} else if("roomId".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "roomId") {
					var this2 = this.parseNumber();
					v_roomId = Std.parseInt(this2.source.substring(this2.min,this2.max));
					hasv_roomId = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { roomId : hasv_roomId ? v_roomId : __missing__("roomId"), v : hasv_v ? v_v : __missing__("v")};
	}
	,parse3: function() {
		var _gthis = this;
		var v_v = null;
		var hasv_v = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("v".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "v") {
					v_v = this.parse4();
					hasv_v = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { v : hasv_v ? v_v : __missing__("v")};
	}
	,parse4: function() {
		var __ret = this.parse5();
		var o = __ret.RoomCreated;
		if(o != null) {
			return exp_rtg_message_DownlinkMeta.RoomCreated(o.id,o.type);
		} else {
			var o1 = __ret.RoomJoined;
			if(o1 != null) {
				return exp_rtg_message_DownlinkMeta.RoomJoined(o1.id,o1.gid,o1.type);
			} else {
				var o2 = __ret.RoomRejoined;
				if(o2 != null) {
					return exp_rtg_message_DownlinkMeta.RoomRejoined(o2.id,o2.gid,o2.type);
				} else {
					var o3 = __ret.RoomLeft;
					if(o3 != null) {
						return exp_rtg_message_DownlinkMeta.RoomLeft(o3.id);
					} else {
						var o4 = __ret.RoomClosed;
						if(o4 != null) {
							return exp_rtg_message_DownlinkMeta.RoomClosed(o4.id);
						} else {
							var o5 = __ret.RoomCreateFailed;
							if(o5 != null) {
								return exp_rtg_message_DownlinkMeta.RoomCreateFailed(o5.type,o5.reason);
							} else {
								var o6 = __ret.RoomJoinFailed;
								if(o6 != null) {
									return exp_rtg_message_DownlinkMeta.RoomJoinFailed(o6.id,o6.reason);
								} else {
									var o7 = __ret.RoomRejoinFailed;
									if(o7 != null) {
										return exp_rtg_message_DownlinkMeta.RoomRejoinFailed(o7.id,o7.gid,o7.reason);
									} else {
										var o8 = __ret.RoomLeaveFailed;
										if(o8 != null) {
											return exp_rtg_message_DownlinkMeta.RoomLeaveFailed(o8.id,o8.reason);
										} else {
											var o9 = __ret.RoomCloseFailed;
											if(o9 != null) {
												return exp_rtg_message_DownlinkMeta.RoomCloseFailed(o9.id,o9.reason);
											} else {
												throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Cannot process " + Std.string(__ret),{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 359, className : "tink.json.Parser2", methodName : "parse4"}));
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	,parse5: function() {
		var _gthis = this;
		var v_RoomCloseFailed = null;
		var v_RoomClosed = null;
		var v_RoomCreateFailed = null;
		var v_RoomCreated = null;
		var v_RoomJoinFailed = null;
		var v_RoomJoined = null;
		var v_RoomLeaveFailed = null;
		var v_RoomLeft = null;
		var v_RoomRejoinFailed = null;
		var v_RoomRejoined = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("RoomRejoined".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "RoomRejoined") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_RoomRejoined1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_RoomRejoined1 = true;
					} else {
						v_RoomRejoined1 = false;
					}
					v_RoomRejoined = v_RoomRejoined1 ? null : this.parse15();
				} else if("RoomRejoinFailed".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "RoomRejoinFailed") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_RoomRejoinFailed1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_RoomRejoinFailed1 = true;
					} else {
						v_RoomRejoinFailed1 = false;
					}
					v_RoomRejoinFailed = v_RoomRejoinFailed1 ? null : this.parse18();
				} else if("RoomLeft".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "RoomLeft") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_RoomLeft1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_RoomLeft1 = true;
					} else {
						v_RoomLeft1 = false;
					}
					v_RoomLeft = v_RoomLeft1 ? null : this.parse9();
				} else if("RoomLeaveFailed".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "RoomLeaveFailed") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_RoomLeaveFailed1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_RoomLeaveFailed1 = true;
					} else {
						v_RoomLeaveFailed1 = false;
					}
					v_RoomLeaveFailed = v_RoomLeaveFailed1 ? null : this.parse16();
				} else if("RoomJoined".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "RoomJoined") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_RoomJoined1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_RoomJoined1 = true;
					} else {
						v_RoomJoined1 = false;
					}
					v_RoomJoined = v_RoomJoined1 ? null : this.parse15();
				} else if("RoomJoinFailed".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "RoomJoinFailed") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_RoomJoinFailed1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_RoomJoinFailed1 = true;
					} else {
						v_RoomJoinFailed1 = false;
					}
					v_RoomJoinFailed = v_RoomJoinFailed1 ? null : this.parse13();
				} else if("RoomCreated".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "RoomCreated") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_RoomCreated1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_RoomCreated1 = true;
					} else {
						v_RoomCreated1 = false;
					}
					v_RoomCreated = v_RoomCreated1 ? null : this.parse12();
				} else if("RoomCreateFailed".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "RoomCreateFailed") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_RoomCreateFailed1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_RoomCreateFailed1 = true;
					} else {
						v_RoomCreateFailed1 = false;
					}
					v_RoomCreateFailed = v_RoomCreateFailed1 ? null : this.parse10();
				} else if("RoomClosed".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "RoomClosed") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_RoomClosed1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_RoomClosed1 = true;
					} else {
						v_RoomClosed1 = false;
					}
					v_RoomClosed = v_RoomClosed1 ? null : this.parse9();
				} else if("RoomCloseFailed".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "RoomCloseFailed") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_RoomCloseFailed1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_RoomCloseFailed1 = true;
					} else {
						v_RoomCloseFailed1 = false;
					}
					v_RoomCloseFailed = v_RoomCloseFailed1 ? null : this.parse6();
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { RoomCloseFailed : v_RoomCloseFailed, RoomClosed : v_RoomClosed, RoomCreateFailed : v_RoomCreateFailed, RoomCreated : v_RoomCreated, RoomJoinFailed : v_RoomJoinFailed, RoomJoined : v_RoomJoined, RoomLeaveFailed : v_RoomLeaveFailed, RoomLeft : v_RoomLeft, RoomRejoinFailed : v_RoomRejoinFailed, RoomRejoined : v_RoomRejoined};
	}
	,parse6: function() {
		var _gthis = this;
		var v_id = 0;
		var hasv_id = false;
		var v_reason = null;
		var hasv_reason = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("reason".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "reason") {
					v_reason = this.parse7();
					hasv_reason = true;
				} else if("id".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "id") {
					var this1 = this.parseNumber();
					v_id = Std.parseInt(this1.source.substring(this1.min,this1.max));
					hasv_id = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { id : hasv_id ? v_id : __missing__("id"), reason : hasv_reason ? v_reason : __missing__("reason")};
	}
	,parse7: function() {
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 34) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseRestOfString());
			switch(_g) {
			case "NotExist":
				return exp_rtg_message_RoomCloseFailReason.NotExist;
			case "NotHost":
				return exp_rtg_message_RoomCloseFailReason.NotHost;
			default:
				var invalid = _g;
				throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Invalid constructor " + invalid,{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 370, className : "tink.json.Parser2", methodName : "parse7"}));
			}
		} else {
			var __ret = this.parse8();
			throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Cannot process " + Std.string(__ret),{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 359, className : "tink.json.Parser2", methodName : "parse7"}));
		}
	}
	,parse8: function() {
		var _gthis = this;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				this.skipValue();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { };
	}
	,parse9: function() {
		var _gthis = this;
		var v_id = 0;
		var hasv_id = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("id".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "id") {
					var this1 = this.parseNumber();
					v_id = Std.parseInt(this1.source.substring(this1.min,this1.max));
					hasv_id = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { id : hasv_id ? v_id : __missing__("id")};
	}
	,parse10: function() {
		var _gthis = this;
		var v_reason = null;
		var hasv_reason = false;
		var v_type = null;
		var hasv_type = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("type".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "type") {
					v_type = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					hasv_type = true;
				} else if("reason".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "reason") {
					v_reason = this.parse11();
					hasv_reason = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { reason : hasv_reason ? v_reason : __missing__("reason"), type : hasv_type ? v_type : __missing__("type")};
	}
	,parse11: function() {
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 34) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseRestOfString());
			if(_g == "UnsupportedType") {
				return exp_rtg_message_RoomCreateFailReason.UnsupportedType;
			} else {
				var invalid = _g;
				throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Invalid constructor " + invalid,{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 370, className : "tink.json.Parser2", methodName : "parse11"}));
			}
		} else {
			var __ret = this.parse8();
			throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Cannot process " + Std.string(__ret),{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 359, className : "tink.json.Parser2", methodName : "parse11"}));
		}
	}
	,parse12: function() {
		var _gthis = this;
		var v_id = 0;
		var hasv_id = false;
		var v_type = null;
		var hasv_type = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("type".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "type") {
					v_type = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					hasv_type = true;
				} else if("id".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "id") {
					var this1 = this.parseNumber();
					v_id = Std.parseInt(this1.source.substring(this1.min,this1.max));
					hasv_id = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { id : hasv_id ? v_id : __missing__("id"), type : hasv_type ? v_type : __missing__("type")};
	}
	,parse13: function() {
		var _gthis = this;
		var v_id = 0;
		var hasv_id = false;
		var v_reason = null;
		var hasv_reason = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("reason".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "reason") {
					v_reason = this.parse14();
					hasv_reason = true;
				} else if("id".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "id") {
					var this1 = this.parseNumber();
					v_id = Std.parseInt(this1.source.substring(this1.min,this1.max));
					hasv_id = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { id : hasv_id ? v_id : __missing__("id"), reason : hasv_reason ? v_reason : __missing__("reason")};
	}
	,parse14: function() {
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 34) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseRestOfString());
			if(_g == "NotExist") {
				return exp_rtg_message_RoomJoinFailReason.NotExist;
			} else {
				var invalid = _g;
				throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Invalid constructor " + invalid,{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 370, className : "tink.json.Parser2", methodName : "parse14"}));
			}
		} else {
			var __ret = this.parse8();
			throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Cannot process " + Std.string(__ret),{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 359, className : "tink.json.Parser2", methodName : "parse14"}));
		}
	}
	,parse15: function() {
		var _gthis = this;
		var v_gid = 0;
		var hasv_gid = false;
		var v_id = 0;
		var hasv_id = false;
		var v_type = null;
		var hasv_type = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("type".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "type") {
					v_type = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					hasv_type = true;
				} else if("id".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "id") {
					var this1 = this.parseNumber();
					v_id = Std.parseInt(this1.source.substring(this1.min,this1.max));
					hasv_id = true;
				} else if("gid".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "gid") {
					var this2 = this.parseNumber();
					v_gid = Std.parseInt(this2.source.substring(this2.min,this2.max));
					hasv_gid = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { gid : hasv_gid ? v_gid : __missing__("gid"), id : hasv_id ? v_id : __missing__("id"), type : hasv_type ? v_type : __missing__("type")};
	}
	,parse16: function() {
		var _gthis = this;
		var v_id = 0;
		var hasv_id = false;
		var v_reason = null;
		var hasv_reason = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("reason".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "reason") {
					v_reason = this.parse17();
					hasv_reason = true;
				} else if("id".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "id") {
					var this1 = this.parseNumber();
					v_id = Std.parseInt(this1.source.substring(this1.min,this1.max));
					hasv_id = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { id : hasv_id ? v_id : __missing__("id"), reason : hasv_reason ? v_reason : __missing__("reason")};
	}
	,parse17: function() {
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 34) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseRestOfString());
			switch(_g) {
			case "NotExist":
				return exp_rtg_message_RoomLeaveFailReason.NotExist;
			case "NotJoined":
				return exp_rtg_message_RoomLeaveFailReason.NotJoined;
			default:
				var invalid = _g;
				throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Invalid constructor " + invalid,{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 370, className : "tink.json.Parser2", methodName : "parse17"}));
			}
		} else {
			var __ret = this.parse8();
			throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Cannot process " + Std.string(__ret),{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 359, className : "tink.json.Parser2", methodName : "parse17"}));
		}
	}
	,parse18: function() {
		var _gthis = this;
		var v_gid = 0;
		var hasv_gid = false;
		var v_id = 0;
		var hasv_id = false;
		var v_reason = null;
		var hasv_reason = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("reason".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "reason") {
					v_reason = this.parse19();
					hasv_reason = true;
				} else if("id".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "id") {
					var this1 = this.parseNumber();
					v_id = Std.parseInt(this1.source.substring(this1.min,this1.max));
					hasv_id = true;
				} else if("gid".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "gid") {
					var this2 = this.parseNumber();
					v_gid = Std.parseInt(this2.source.substring(this2.min,this2.max));
					hasv_gid = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { gid : hasv_gid ? v_gid : __missing__("gid"), id : hasv_id ? v_id : __missing__("id"), reason : hasv_reason ? v_reason : __missing__("reason")};
	}
	,parse19: function() {
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 34) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseRestOfString());
			if(_g == "NotExist") {
				return exp_rtg_message_RoomRejoinFailReason.NotExist;
			} else {
				var invalid = _g;
				throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Invalid constructor " + invalid,{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 370, className : "tink.json.Parser2", methodName : "parse19"}));
			}
		} else {
			var __ret = this.parse8();
			throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Cannot process " + Std.string(__ret),{ fileName : "tink/json/macros/GenReader.hx", lineNumber : 359, className : "tink.json.Parser2", methodName : "parse19"}));
		}
	}
	,parse: function(source) {
		this.init(source);
		return this.parse0();
	}
	,tryParse: function(source) {
		var _gthis = this;
		return tink_core_TypedError.catchExceptions(function() {
			return _gthis.parse(source);
		},null,{ fileName : "tink/json/macros/Macro.hx", lineNumber : 93, className : "tink.json.Parser2", methodName : "tryParse"});
	}
	,__class__: tink_json_Parser2
});
var tink_json__$Representation_Representation_$Impl_$ = {};
tink_json__$Representation_Representation_$Impl_$.__name__ = true;
tink_json__$Representation_Representation_$Impl_$.get = function(this1) {
	return this1;
};
var tink_json_Value = $hxEnums["tink.json.Value"] = { __ename__ : true, __constructs__ : ["VNumber","VString","VNull","VBool","VArray","VObject"]
	,VNumber: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["f"],$_)
	,VString: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["s"],$_)
	,VNull: {_hx_index:2,__enum__:"tink.json.Value",toString:$estr}
	,VBool: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["b"],$_)
	,VArray: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["a"],$_)
	,VObject: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"tink.json.Value",toString:$estr}; },$_.__params__ = ["a"],$_)
};
var tink_json_BasicWriter = function() {
	this.plugins = new tink_core_Annex(this);
};
tink_json_BasicWriter.__name__ = true;
tink_json_BasicWriter.prototype = {
	init: function() {
		var this1 = "";
		this.buf = this1;
	}
	,__class__: tink_json_BasicWriter
};
var tink_json_Writer0 = function() {
	tink_json_BasicWriter.call(this);
};
tink_json_Writer0.__name__ = true;
tink_json_Writer0.__super__ = tink_json_BasicWriter;
tink_json_Writer0.prototype = $extend(tink_json_BasicWriter.prototype,{
	parse0: function(value) {
		var _g = value;
		switch(_g._hx_index) {
		case 0:
			var v = _g.v;
			this.buf += "{\"Metadata\":{";
			this.buf += "\"v\"";
			this.buf += String.fromCodePoint(58);
			var value1 = v;
			this.parse1(value1);
			this.buf += "}}";
			break;
		case 1:
			var v1 = _g.v;
			var roomId = _g.roomId;
			this.buf += "{\"Data\":{";
			this.buf += "\"roomId\"";
			this.buf += String.fromCodePoint(58);
			var value2 = roomId;
			this.buf += value2 == null ? "null" : "" + value2;
			this.buf += ",\"v\"";
			this.buf += String.fromCodePoint(58);
			var value3 = v1;
			var this1 = value3.toBytes();
			var value4 = tink_json__$Representation_Representation_$Impl_$.get(this1);
			var s = JSON.stringify(haxe_crypto_Base64.encode(value4));
			this.buf += s;
			this.buf += "}}";
			break;
		}
	}
	,parse1: function(value) {
		var _g = value;
		switch(_g._hx_index) {
		case 0:
			var type = _g.type;
			var id = _g.id;
			this.buf += "{\"RoomCreated\":{";
			this.buf += "\"id\"";
			this.buf += String.fromCodePoint(58);
			var value1 = id;
			this.buf += value1 == null ? "null" : "" + value1;
			this.buf += ",\"type\"";
			this.buf += String.fromCodePoint(58);
			var value2 = type;
			var s = JSON.stringify(value2);
			this.buf += s;
			this.buf += "}}";
			break;
		case 1:
			var type1 = _g.type;
			var gid = _g.gid;
			var id1 = _g.id;
			this.buf += "{\"RoomJoined\":{";
			this.buf += "\"id\"";
			this.buf += String.fromCodePoint(58);
			var value3 = id1;
			this.buf += value3 == null ? "null" : "" + value3;
			this.buf += ",\"gid\"";
			this.buf += String.fromCodePoint(58);
			var value4 = gid;
			this.buf += value4 == null ? "null" : "" + value4;
			this.buf += ",\"type\"";
			this.buf += String.fromCodePoint(58);
			var value5 = type1;
			var s1 = JSON.stringify(value5);
			this.buf += s1;
			this.buf += "}}";
			break;
		case 2:
			var type2 = _g.type;
			var gid1 = _g.gid;
			var id2 = _g.id;
			this.buf += "{\"RoomRejoined\":{";
			this.buf += "\"id\"";
			this.buf += String.fromCodePoint(58);
			var value6 = id2;
			this.buf += value6 == null ? "null" : "" + value6;
			this.buf += ",\"gid\"";
			this.buf += String.fromCodePoint(58);
			var value7 = gid1;
			this.buf += value7 == null ? "null" : "" + value7;
			this.buf += ",\"type\"";
			this.buf += String.fromCodePoint(58);
			var value8 = type2;
			var s2 = JSON.stringify(value8);
			this.buf += s2;
			this.buf += "}}";
			break;
		case 3:
			var id3 = _g.id;
			this.buf += "{\"RoomLeft\":{";
			this.buf += "\"id\"";
			this.buf += String.fromCodePoint(58);
			var value9 = id3;
			this.buf += value9 == null ? "null" : "" + value9;
			this.buf += "}}";
			break;
		case 4:
			var id4 = _g.id;
			this.buf += "{\"RoomClosed\":{";
			this.buf += "\"id\"";
			this.buf += String.fromCodePoint(58);
			var value10 = id4;
			this.buf += value10 == null ? "null" : "" + value10;
			this.buf += "}}";
			break;
		case 5:
			var reason = _g.reason;
			var type3 = _g.type;
			this.buf += "{\"RoomCreateFailed\":{";
			this.buf += "\"type\"";
			this.buf += String.fromCodePoint(58);
			var value11 = type3;
			var s3 = JSON.stringify(value11);
			this.buf += s3;
			this.buf += ",\"reason\"";
			this.buf += String.fromCodePoint(58);
			var value12 = reason;
			this.parse2(value12);
			this.buf += "}}";
			break;
		case 6:
			var reason1 = _g.reason;
			var id5 = _g.id;
			this.buf += "{\"RoomJoinFailed\":{";
			this.buf += "\"id\"";
			this.buf += String.fromCodePoint(58);
			var value13 = id5;
			this.buf += value13 == null ? "null" : "" + value13;
			this.buf += ",\"reason\"";
			this.buf += String.fromCodePoint(58);
			var value14 = reason1;
			this.parse3(value14);
			this.buf += "}}";
			break;
		case 7:
			var reason2 = _g.reason;
			var gid2 = _g.gid;
			var id6 = _g.id;
			this.buf += "{\"RoomRejoinFailed\":{";
			this.buf += "\"id\"";
			this.buf += String.fromCodePoint(58);
			var value15 = id6;
			this.buf += value15 == null ? "null" : "" + value15;
			this.buf += ",\"gid\"";
			this.buf += String.fromCodePoint(58);
			var value16 = gid2;
			this.buf += value16 == null ? "null" : "" + value16;
			this.buf += ",\"reason\"";
			this.buf += String.fromCodePoint(58);
			var value17 = reason2;
			this.parse4(value17);
			this.buf += "}}";
			break;
		case 8:
			var reason3 = _g.reason;
			var id7 = _g.id;
			this.buf += "{\"RoomLeaveFailed\":{";
			this.buf += "\"id\"";
			this.buf += String.fromCodePoint(58);
			var value18 = id7;
			this.buf += value18 == null ? "null" : "" + value18;
			this.buf += ",\"reason\"";
			this.buf += String.fromCodePoint(58);
			var value19 = reason3;
			this.parse5(value19);
			this.buf += "}}";
			break;
		case 9:
			var reason4 = _g.reason;
			var id8 = _g.id;
			this.buf += "{\"RoomCloseFailed\":{";
			this.buf += "\"id\"";
			this.buf += String.fromCodePoint(58);
			var value20 = id8;
			this.buf += value20 == null ? "null" : "" + value20;
			this.buf += ",\"reason\"";
			this.buf += String.fromCodePoint(58);
			var value21 = reason4;
			this.parse6(value21);
			this.buf += "}}";
			break;
		}
	}
	,parse2: function(value) {
		var _g = value;
		this.buf += "\"UnsupportedType\"";
	}
	,parse3: function(value) {
		var _g = value;
		this.buf += "\"NotExist\"";
	}
	,parse4: function(value) {
		var _g = value;
		this.buf += "\"NotExist\"";
	}
	,parse5: function(value) {
		switch(value._hx_index) {
		case 0:
			this.buf += "\"NotExist\"";
			break;
		case 1:
			this.buf += "\"NotJoined\"";
			break;
		}
	}
	,parse6: function(value) {
		switch(value._hx_index) {
		case 0:
			this.buf += "\"NotExist\"";
			break;
		case 1:
			this.buf += "\"NotHost\"";
			break;
		}
	}
	,write: function(value) {
		this.init();
		this.parse0(value);
		return this.buf.toString();
	}
	,__class__: tink_json_Writer0
});
var tink_json_Writer1 = function() {
	tink_json_BasicWriter.call(this);
};
tink_json_Writer1.__name__ = true;
tink_json_Writer1.__super__ = tink_json_BasicWriter;
tink_json_Writer1.prototype = $extend(tink_json_BasicWriter.prototype,{
	write: function(value) {
		this.init();
		this.buf += String.fromCodePoint(91);
		var first = true;
		var _g = 0;
		while(_g < value.length) {
			var value1 = value[_g];
			++_g;
			if(first) {
				first = false;
			} else {
				this.buf += String.fromCodePoint(44);
			}
			var value2 = value1;
			this.buf += value2 == null ? "null" : "" + value2;
		}
		this.buf += String.fromCodePoint(93);
		return this.buf.toString();
	}
	,__class__: tink_json_Writer1
});
var tink_json_Writer2 = function() {
	tink_json_BasicWriter.call(this);
};
tink_json_Writer2.__name__ = true;
tink_json_Writer2.__super__ = tink_json_BasicWriter;
tink_json_Writer2.prototype = $extend(tink_json_BasicWriter.prototype,{
	parse0: function(value) {
		var _g = value;
		switch(_g._hx_index) {
		case 0:
			var v = _g.v;
			this.buf += "{\"Metadata\":{";
			this.buf += "\"v\"";
			this.buf += String.fromCodePoint(58);
			var value1 = v;
			this.parse1(value1);
			this.buf += "}}";
			break;
		case 1:
			var v1 = _g.v;
			var roomId = _g.roomId;
			this.buf += "{\"Data\":{";
			this.buf += "\"roomId\"";
			this.buf += String.fromCodePoint(58);
			var value2 = roomId;
			this.buf += value2 == null ? "null" : "" + value2;
			this.buf += ",\"v\"";
			this.buf += String.fromCodePoint(58);
			var value3 = v1;
			var this1 = value3.toBytes();
			var value4 = tink_json__$Representation_Representation_$Impl_$.get(this1);
			var s = JSON.stringify(haxe_crypto_Base64.encode(value4));
			this.buf += s;
			this.buf += "}}";
			break;
		}
	}
	,parse1: function(value) {
		var _g = value;
		switch(_g._hx_index) {
		case 0:
			var type = _g.type;
			this.buf += "{\"CreateRoom\":{";
			this.buf += "\"type\"";
			this.buf += String.fromCodePoint(58);
			var value1 = type;
			var s = JSON.stringify(value1);
			this.buf += s;
			this.buf += "}}";
			break;
		case 1:
			var id = _g.id;
			this.buf += "{\"JoinRoom\":{";
			this.buf += "\"id\"";
			this.buf += String.fromCodePoint(58);
			var value2 = id;
			this.buf += value2 == null ? "null" : "" + value2;
			this.buf += "}}";
			break;
		case 2:
			var gid = _g.gid;
			var id1 = _g.id;
			this.buf += "{\"RejoinRoom\":{";
			this.buf += "\"id\"";
			this.buf += String.fromCodePoint(58);
			var value3 = id1;
			this.buf += value3 == null ? "null" : "" + value3;
			this.buf += ",\"gid\"";
			this.buf += String.fromCodePoint(58);
			var value4 = gid;
			this.buf += value4 == null ? "null" : "" + value4;
			this.buf += "}}";
			break;
		case 3:
			var id2 = _g.id;
			this.buf += "{\"LeaveRoom\":{";
			this.buf += "\"id\"";
			this.buf += String.fromCodePoint(58);
			var value5 = id2;
			this.buf += value5 == null ? "null" : "" + value5;
			this.buf += "}}";
			break;
		case 4:
			var id3 = _g.id;
			this.buf += "{\"CloseRoom\":{";
			this.buf += "\"id\"";
			this.buf += String.fromCodePoint(58);
			var value6 = id3;
			this.buf += value6 == null ? "null" : "" + value6;
			this.buf += "}}";
			break;
		}
	}
	,write: function(value) {
		this.init();
		this.parse0(value);
		return this.buf.toString();
	}
	,__class__: tink_json_Writer2
});
var tink_json_Writer3 = function() {
	tink_json_BasicWriter.call(this);
};
tink_json_Writer3.__name__ = true;
tink_json_Writer3.__super__ = tink_json_BasicWriter;
tink_json_Writer3.prototype = $extend(tink_json_BasicWriter.prototype,{
	parse0: function(value) {
		var dir = value.dir;
		this.buf += "{\"SetDirection\":{";
		this.buf += "\"dir\"";
		this.buf += String.fromCodePoint(58);
		var value1 = dir;
		var value2 = value1;
		this.buf += value2 == null ? "null" : "" + value2;
		this.buf += "}}";
	}
	,write: function(value) {
		this.init();
		this.parse0(value);
		return this.buf.toString();
	}
	,__class__: tink_json_Writer3
});
var tink_state__$Observable_Observable_$Impl_$ = {};
tink_state__$Observable_Observable_$Impl_$.__name__ = true;
tink_state__$Observable_Observable_$Impl_$.get_value = function(this1) {
	return tink_state__$Observable_Observable_$Impl_$.measure(this1).a;
};
tink_state__$Observable_Observable_$Impl_$.measure = function(this1) {
	var before = tink_state__$Observable_Observable_$Impl_$.stack.first();
	tink_state__$Observable_Observable_$Impl_$.stack.push(this1);
	var p = this1.poll();
	if(js_Boot.getClass(before) == tink_state__$Observable_AutoObservable) {
		before.subscribe(this1,p);
	}
	tink_state__$Observable_Observable_$Impl_$.stack.pop();
	return p;
};
tink_state__$Observable_Observable_$Impl_$.create = function(f,comparator) {
	return new tink_state__$Observable_SimpleObservable(f,comparator);
};
var tink_state__$Observable_SimpleObservable = function(f,comparator) {
	this._poll = f;
	this.comparator = comparator;
};
tink_state__$Observable_SimpleObservable.__name__ = true;
tink_state__$Observable_SimpleObservable.prototype = {
	resetCache: function(_) {
		this.cache = null;
	}
	,poll: function() {
		var count = 0;
		var last = null;
		while(this.cache == null) {
			var cache = this.cache = this._poll();
			if(last == cache) {
				throw new js__$Boot_HaxeError("Polling loops on the same value");
			}
			last = cache;
			cache.b.handle($bind(this,this.resetCache));
			if(count++ >= 100) {
				throw new js__$Boot_HaxeError("Polling not concluded after 100 iterations");
			}
		}
		return this.cache;
	}
	,getComparator: function() {
		return this.comparator;
	}
	,__class__: tink_state__$Observable_SimpleObservable
};
var tink_state__$Observable_DependencyOf = function(data,initial,trigger) {
	this.data = data;
	this.comparator = data.getComparator();
	this.last = initial.a;
	this.link = initial.b.handle($bind(trigger,trigger.trigger));
};
tink_state__$Observable_DependencyOf.__name__ = true;
tink_state__$Observable_DependencyOf.prototype = {
	changed: function() {
		var _g = this.comparator;
		if(_g == null) {
			return this.last != tink_state__$Observable_Observable_$Impl_$.get_value(this.data);
		} else {
			var f = _g;
			return !f(this.last,tink_state__$Observable_Observable_$Impl_$.get_value(this.data));
		}
	}
	,unlink: function() {
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
	}
	,resubscribe: function(trigger) {
		var next = tink_state__$Observable_Observable_$Impl_$.measure(this.data).b.handle(function(_) {
			trigger.trigger(tink_core_Noise.Noise);
		});
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
		this.link = next;
	}
	,__class__: tink_state__$Observable_DependencyOf
};
var tink_state__$Observable_AutoObservable = function(comp,comparator) {
	var _gthis = this;
	tink_state__$Observable_SimpleObservable.call(this,function() {
		_gthis.trigger = new tink_core_FutureTrigger();
		if(_gthis.dependencies != null) {
			var changed = false;
			var _g = 0;
			var _g1 = _gthis.dependencies;
			while(_g < _g1.length) {
				var d = _g1[_g];
				++_g;
				if(d.changed()) {
					changed = true;
					break;
				}
			}
			if(changed) {
				var _g2 = 0;
				var _g3 = _gthis.dependencies;
				while(_g2 < _g3.length) {
					var d1 = _g3[_g2];
					++_g2;
					d1.unlink();
				}
			} else {
				var _g21 = 0;
				var _g31 = _gthis.dependencies;
				while(_g21 < _g31.length) {
					var d2 = _g31[_g21];
					++_g21;
					d2.resubscribe(_gthis.trigger);
				}
				var this1 = new tink_core_MPair(_gthis.last,_gthis.trigger);
				var this2 = this1;
				return this2;
			}
		}
		_gthis.dependencies = [];
		_gthis.isSubscribed = new haxe_ds_ObjectMap();
		var this3 = new tink_core_MPair(_gthis.last = comp(),_gthis.trigger);
		var this4 = this3;
		return this4;
	},comparator);
};
tink_state__$Observable_AutoObservable.__name__ = true;
tink_state__$Observable_AutoObservable.__super__ = tink_state__$Observable_SimpleObservable;
tink_state__$Observable_AutoObservable.prototype = $extend(tink_state__$Observable_SimpleObservable.prototype,{
	subscribe: function(dependency,initial) {
		if(!this.isSubscribed.h[dependency.__id__]) {
			this.isSubscribed.set(dependency,true);
			this.dependencies.push(new tink_state__$Observable_DependencyOf(dependency,initial,this.trigger));
		}
	}
	,__class__: tink_state__$Observable_AutoObservable
});
var tink_state__$ObservableArray_Change = $hxEnums["tink.state._ObservableArray.Change"] = { __ename__ : true, __constructs__ : ["Remove","Insert","Update"]
	,Remove: ($_=function(index,values) { return {_hx_index:0,index:index,values:values,__enum__:"tink.state._ObservableArray.Change",toString:$estr}; },$_.__params__ = ["index","values"],$_)
	,Insert: ($_=function(index,values) { return {_hx_index:1,index:index,values:values,__enum__:"tink.state._ObservableArray.Change",toString:$estr}; },$_.__params__ = ["index","values"],$_)
	,Update: ($_=function(index,values) { return {_hx_index:2,index:index,values:values,__enum__:"tink.state._ObservableArray.Change",toString:$estr}; },$_.__params__ = ["index","values"],$_)
};
var tink_state__$ObservableArray_ValueIterator = function(target) {
	this.target = target;
};
tink_state__$ObservableArray_ValueIterator.__name__ = true;
tink_state__$ObservableArray_ValueIterator.prototype = {
	poll: function() {
		var value = HxOverrides.iter(this.target.items);
		var ret = tink_core__$Signal_Signal_$Impl_$.nextTime(this.target.changes).map(function(_) {
			return tink_core_Noise.Noise;
		});
		var this1 = new tink_core_MPair(value,ret.gather());
		var this2 = this1;
		return this2;
	}
	,getComparator: function() {
		return null;
	}
	,__class__: tink_state__$ObservableArray_ValueIterator
};
var tink_state_ObservableBase = function() {
	this._changes = new tink_core_SignalTrigger();
	this.changes = this._changes;
};
tink_state_ObservableBase.__name__ = true;
tink_state_ObservableBase.prototype = {
	observable: function(ret,when) {
		var _gthis = this;
		return tink_state__$Observable_Observable_$Impl_$.create(function() {
			var ret1 = ret();
			var this1;
			if(when == null) {
				this1 = _gthis.changes;
			} else {
				var f = when;
				var a1 = ret1;
				var this2 = function(a2) {
					return f(a1,a2);
				};
				this1 = tink_core__$Signal_Signal_$Impl_$.filter(_gthis.changes,this2,false);
			}
			var ret2 = tink_core__$Signal_Signal_$Impl_$.nextTime(this1).map(function(_) {
				return tink_core_Noise.Noise;
			});
			var this3 = new tink_core_MPair(ret1,ret2.gather());
			var this4 = this3;
			return this4;
		});
	}
	,__class__: tink_state_ObservableBase
};
var tink_state_ObservableArray = function(items) {
	var _gthis = this;
	this.items = items == null ? [] : items;
	tink_state_ObservableBase.call(this);
	this.observableLength = this.observable(function() {
		return _gthis.items.length;
	},function(_,c) {
		if(c._hx_index == 2) {
			var _g1 = c.values;
			var _g = c.index;
			return false;
		} else {
			return true;
		}
	});
	this.observableValues = new tink_state__$ObservableArray_ValueIterator(this);
};
tink_state_ObservableArray.__name__ = true;
tink_state_ObservableArray.__super__ = tink_state_ObservableBase;
tink_state_ObservableArray.prototype = $extend(tink_state_ObservableBase.prototype,{
	values: function() {
		return tink_state__$Observable_Observable_$Impl_$.get_value(this.observableValues);
	}
	,remove: function(item) {
		var _g = this.items.indexOf(item);
		if(_g == -1) {
			return false;
		} else {
			var v = _g;
			this.splice(v,1);
			return true;
		}
	}
	,splice: function(index,length) {
		var ret = this.items.splice(index,length);
		if(ret.length > 0) {
			this._changes.handlers.invoke(tink_state__$ObservableArray_Change.Remove(index,ret));
		}
		return ret;
	}
	,insertMany: function(pos,values) {
		if(values.length > 0) {
			this.items = this.items.slice(0,pos).concat(values).concat(this.items.slice(pos));
			this._changes.handlers.invoke(tink_state__$ObservableArray_Change.Insert(pos,values));
		}
	}
	,__class__: tink_state_ObservableArray
});
var tink_state_ObservableIterator = function(iterator,changes) {
	this.iterator = iterator;
	this.changes = changes;
};
tink_state_ObservableIterator.__name__ = true;
tink_state_ObservableIterator.make = function(iterator,changes,trigger) {
	return new tink_state_ObservableIterator(iterator,tink_core__$Signal_Signal_$Impl_$.select(changes,function(c) {
		if(trigger == null || trigger(c)) {
			return tink_state_ObservableIterator.TRIGGER;
		} else {
			return haxe_ds_Option.None;
		}
	}));
};
tink_state_ObservableIterator.prototype = {
	poll: function() {
		var this1 = new tink_core_MPair(this.iterator(),tink_core__$Signal_Signal_$Impl_$.nextTime(this.changes));
		var this2 = this1;
		return this2;
	}
	,getComparator: function() {
		return null;
	}
	,__class__: tink_state_ObservableIterator
};
var tink_state__$ObservableMap_Update = function(key,from,to) {
	this.key = key;
	this.from = from;
	this.to = to;
};
tink_state__$ObservableMap_Update.__name__ = true;
tink_state__$ObservableMap_Update.prototype = {
	__class__: tink_state__$ObservableMap_Update
};
var tink_state_ObservableMap = function(initial) {
	tink_state_ObservableBase.call(this);
	this.map = initial;
	var _e = this.map;
	this.observableKeys = tink_state_ObservableIterator.make(function() {
		return _e.keys();
	},this.changes,function(c) {
		var _g = c.to;
		var _g1 = c.from;
		if(_g1._hx_index == 0) {
			var _g2 = _g1.v;
			if(_g._hx_index == 0) {
				var _g3 = _g.v;
				return false;
			} else {
				return true;
			}
		} else {
			return true;
		}
	});
	var _e1 = this.map;
	this.observableValues = tink_state_ObservableIterator.make(function() {
		return _e1.iterator();
	},this.changes);
	var _e2 = this.map;
	this.asString = this.observable(function() {
		return _e2.toString();
	});
};
tink_state_ObservableMap.__name__ = true;
tink_state_ObservableMap.__super__ = tink_state_ObservableBase;
tink_state_ObservableMap.prototype = $extend(tink_state_ObservableBase.prototype,{
	observe: function(key) {
		var _e = this.map;
		var f = function(key1) {
			return _e.get(key1);
		};
		var key2 = key;
		return this.observable(function() {
			return f(key2);
		},function(_,c) {
			return c.key == key;
		});
	}
	,get: function(key) {
		return tink_state__$Observable_Observable_$Impl_$.get_value(this.observe(key));
	}
	,set: function(key,value) {
		var _g = this.map.get(key);
		var unchanged = _g;
		if(value != unchanged) {
			var old = _g;
			var from = this.map.exists(key) ? haxe_ds_Option.Some(old) : haxe_ds_Option.None;
			this.map.set(key,value);
			var _this = this._changes;
			var event = new tink_state__$ObservableMap_Update(key,from,haxe_ds_Option.Some(value));
			_this.handlers.invoke(event);
		}
	}
	,exists: function(key) {
		var _e = this.map;
		var f = function(key1) {
			return _e.exists(key1);
		};
		var key2 = key;
		return tink_state__$Observable_Observable_$Impl_$.get_value(this.observable(function() {
			return f(key2);
		},function(exists,c) {
			return exists == (c.to == haxe_ds_Option.None);
		}));
	}
	,iterator: function() {
		return tink_state__$Observable_Observable_$Impl_$.get_value(this.observableValues);
	}
	,keys: function() {
		return tink_state__$Observable_Observable_$Impl_$.get_value(this.observableKeys);
	}
	,toString: function() {
		return tink_state__$Observable_Observable_$Impl_$.get_value(this.asString);
	}
	,__class__: tink_state_ObservableMap
});
var tink_url__$Host_Host_$Impl_$ = {};
tink_url__$Host_Host_$Impl_$.__name__ = true;
tink_url__$Host_Host_$Impl_$._new = function(name,port) {
	var this1;
	if(port == null) {
		this1 = name;
	} else if(port > 65535 || port <= 0) {
		throw new js__$Boot_HaxeError("Invalid port");
	} else {
		this1 = "" + name + ":" + port;
	}
	return this1;
};
var tink_url__$Path_Path_$Impl_$ = {};
tink_url__$Path_Path_$Impl_$.__name__ = true;
tink_url__$Path_Path_$Impl_$.ofString = function(s) {
	var this1 = tink_url__$Path_Path_$Impl_$.normalize(s);
	return this1;
};
tink_url__$Path_Path_$Impl_$.normalize = function(s) {
	s = StringTools.trim(StringTools.replace(s,"\\","/"));
	if(s == ".") {
		return "./";
	}
	var isDir = StringTools.endsWith(s,"/..") || StringTools.endsWith(s,"/") || StringTools.endsWith(s,"/.");
	var parts = [];
	var isAbsolute = StringTools.startsWith(s,"/");
	var up = 0;
	var _g = 0;
	var _g1 = s.split("/");
	while(_g < _g1.length) {
		var part = _g1[_g];
		++_g;
		var _g2 = StringTools.trim(part);
		switch(_g2) {
		case "":
			break;
		case ".":
			break;
		case "..":
			if(parts.pop() == null) {
				++up;
			}
			break;
		default:
			var v = _g2;
			parts.push(v);
		}
	}
	if(isAbsolute) {
		parts.unshift("");
	} else {
		var _g21 = 0;
		var _g3 = up;
		while(_g21 < _g3) {
			var i = _g21++;
			parts.unshift("..");
		}
	}
	if(isDir) {
		parts.push("");
	}
	return parts.join("/");
};
var tink_url__$Portion_Portion_$Impl_$ = {};
tink_url__$Portion_Portion_$Impl_$.__name__ = true;
tink_url__$Portion_Portion_$Impl_$.stringly = function(this1) {
	return tink_url__$Portion_Portion_$Impl_$.toString(this1);
};
tink_url__$Portion_Portion_$Impl_$.toString = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return decodeURIComponent(this1.split("+").join(" "));
	}
};
tink_url__$Portion_Portion_$Impl_$.ofString = function(s) {
	var this1 = s == null ? "" : encodeURIComponent(s);
	return this1;
};
var tink_url__$Query_Query_$Impl_$ = {};
tink_url__$Query_Query_$Impl_$.__name__ = true;
tink_url__$Query_Query_$Impl_$.toMap = function(this1) {
	var _g = new haxe_ds_StringMap();
	var p = new tink_url__$Query_QueryStringParser(this1,"&","=",0);
	while(p.hasNext()) {
		var p1 = p.next();
		var key = p1.name.toString();
		var value = p1.value;
		if(__map_reserved[key] != null) {
			_g.setReserved(key,value);
		} else {
			_g.h[key] = value;
		}
	}
	return _g;
};
var tink_url__$Query_QueryStringParser = function(s,sep,set,pos) {
	this.s = s == null ? "" : s;
	this.sep = sep;
	this.set = set;
	this.pos = pos;
};
tink_url__$Query_QueryStringParser.__name__ = true;
tink_url__$Query_QueryStringParser.trimmedSub = function(s,start,end) {
	if(start >= s.length) {
		var this1 = "";
		return this1;
	}
	while(s.charCodeAt(start) < 33) ++start;
	if(end < s.length - 1) {
		while(s.charCodeAt(end - 1) < 33) --end;
	}
	var this2 = s.substring(start,end);
	return this2;
};
tink_url__$Query_QueryStringParser.prototype = {
	hasNext: function() {
		return this.pos < this.s.length;
	}
	,next: function() {
		var next = this.s.indexOf(this.sep,this.pos);
		if(next == -1) {
			next = this.s.length;
		}
		var split = this.s.indexOf(this.set,this.pos);
		var start = this.pos;
		this.pos = next + this.sep.length;
		if(split == -1 || split > next) {
			return new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.stringly(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,next)),tink_url__$Portion_Portion_$Impl_$.ofString(""));
		} else {
			return new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.stringly(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,split)),tink_url__$Query_QueryStringParser.trimmedSub(this.s,split + this.set.length,next));
		}
	}
	,__class__: tink_url__$Query_QueryStringParser
};
var why_duplex_peerjs_PeerJsClient = function(conn) {
	this.conn = conn;
	this.disconnected = tink_core__$Future_Future_$Impl_$.async(function(cb) {
		conn.on("error",function(e) {
			var tmp = haxe_ds_Option.Some(tink_core_TypedError.withData(500,e.message,e,{ fileName : "/Users/kevin/Codes/exp-rtg-page/../why-duplex/src/why/duplex/peerjs/PeerJsClient.hx", lineNumber : 16, className : "why.duplex.peerjs.PeerJsClient", methodName : "new"}));
			cb(tmp);
		});
		conn.on("close",function() {
			cb(haxe_ds_Option.None);
		});
	});
	var this1 = new tink_core__$Signal_SimpleSignal(function(cb1) {
		var onData = function(data) {
			var onData1 = tink_chunk_ByteChunk.of(haxe_io_Bytes.ofData(data));
			tink_core__$Callback_Callback_$Impl_$.invoke(cb1,onData1);
		};
		conn.on("data",onData);
		var f1 = $bind(conn,conn.off);
		var f = onData;
		var this2 = new tink_core_SimpleLink(function() {
			return f1("data",f);
		});
		return this2;
	});
	this.data = tink_core__$Signal_Signal_$Impl_$.until(this1,this.disconnected);
};
why_duplex_peerjs_PeerJsClient.__name__ = true;
why_duplex_peerjs_PeerJsClient.connect = function(opt) {
	var f = function(opt1,cb) {
		return new why_duplex_peerjs__$PeerJsClient_ConenctContext(opt1,cb);
	};
	var opt2 = opt;
	return tink_core__$Future_Future_$Impl_$.async(function(cb1) {
		return f(opt2,cb1);
	});
};
why_duplex_peerjs_PeerJsClient.prototype = {
	send: function(data) {
		this.conn.send(data.toBytes().b.bufferValue);
		return tink_core__$Promise_Promise_$Impl_$.NOISE;
	}
	,__class__: why_duplex_peerjs_PeerJsClient
};
var why_duplex_peerjs__$PeerJsClient_ConenctContext = function(opt,cb) {
	this.cb = cb;
	this.conn = new Peer(null,{ key : opt.key}).connect(opt.id);
	this.conn.on("error",$bind(this,this.onError));
	this.conn.on("open",$bind(this,this.onOpen));
};
why_duplex_peerjs__$PeerJsClient_ConenctContext.__name__ = true;
why_duplex_peerjs__$PeerJsClient_ConenctContext.prototype = {
	onError: function(e) {
		this.conn.off("open",$bind(this,this.onOpen));
		this.cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(500,e.message,e,{ fileName : "/Users/kevin/Codes/exp-rtg-page/../why-duplex/src/why/duplex/peerjs/PeerJsClient.hx", lineNumber : 58, className : "why.duplex.peerjs._PeerJsClient.ConenctContext", methodName : "onError"})));
	}
	,onOpen: function() {
		this.conn.off("error",$bind(this,this.onError));
		this.cb(tink_core_Outcome.Success(new why_duplex_peerjs_PeerJsClient(this.conn)));
	}
	,__class__: why_duplex_peerjs__$PeerJsClient_ConenctContext
};
var why_duplex_peerjs_PeerJsServer = function(peer) {
	this.peer = peer;
	var this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
		var onConnect = function(conn) {
			conn.on("open",function() {
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,new why_duplex_peerjs_PeerJsClient(conn));
				return;
			});
		};
		peer.on("connection",onConnect);
		var f1 = $bind(peer,peer.off);
		var f = onConnect;
		var this2 = new tink_core_SimpleLink(function() {
			return f1("connection",f);
		});
		return this2;
	});
	this.connected = this1;
	var this3 = new tink_core__$Signal_SimpleSignal(function(cb1) {
		var onError = function(e) {
			var onError1 = tink_core_TypedError.withData(500,e.message,e,{ fileName : "/Users/kevin/Codes/exp-rtg-page/../why-duplex/src/why/duplex/peerjs/PeerJsServer.hx", lineNumber : 22, className : "why.duplex.peerjs.PeerJsServer", methodName : "new"});
			tink_core__$Callback_Callback_$Impl_$.invoke(cb1,onError1);
		};
		peer.on("error",onError);
		var f11 = $bind(peer,peer.off);
		var f2 = onError;
		var this4 = new tink_core_SimpleLink(function() {
			return f11("error",f2);
		});
		return this4;
	});
	this.errors = this3;
};
why_duplex_peerjs_PeerJsServer.__name__ = true;
why_duplex_peerjs_PeerJsServer.bind = function(opt) {
	var f = function(opt1,cb) {
		return new why_duplex_peerjs__$PeerJsServer_BindContext(opt1,cb);
	};
	var opt2 = opt;
	return tink_core__$Future_Future_$Impl_$.async(function(cb1) {
		return f(opt2,cb1);
	});
};
why_duplex_peerjs_PeerJsServer.prototype = {
	__class__: why_duplex_peerjs_PeerJsServer
};
var why_duplex_peerjs__$PeerJsServer_BindContext = function(opt,cb) {
	this.cb = cb;
	this.peer = new Peer(opt.id,opt);
	this.peer.once("error",$bind(this,this.onError));
	this.peer.once("open",$bind(this,this.onOpen));
};
why_duplex_peerjs__$PeerJsServer_BindContext.__name__ = true;
why_duplex_peerjs__$PeerJsServer_BindContext.prototype = {
	onError: function(e) {
		this.peer.off("open",$bind(this,this.onOpen));
		this.cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(500,e.message,e,{ fileName : "/Users/kevin/Codes/exp-rtg-page/../why-duplex/src/why/duplex/peerjs/PeerJsServer.hx", lineNumber : 52, className : "why.duplex.peerjs._PeerJsServer.BindContext", methodName : "onError"})));
	}
	,onOpen: function(id) {
		this.peer.off("error",$bind(this,this.onError));
		this.cb(tink_core_Outcome.Success(new why_duplex_peerjs_PeerJsServer(this.peer)));
	}
	,__class__: why_duplex_peerjs__$PeerJsServer_BindContext
};
var why_qrcode_encoder_JsEncoder = function(errorCorrectionLevel) {
	this.errorCorrectionLevel = errorCorrectionLevel;
};
why_qrcode_encoder_JsEncoder.__name__ = true;
why_qrcode_encoder_JsEncoder.prototype = {
	encode: function(text) {
		var qr = qrcode(0,this.errorCorrectionLevel);
		qr.addData(text);
		qr.make();
		var count = qr.getModuleCount();
		var data = [];
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var y = _g++;
			data[y] = [];
			var _g2 = 0;
			var _g11 = count;
			while(_g2 < _g11) {
				var x = _g2++;
				data[y][x] = qr.isDark(y,x) ? 1 : 0;
			}
		}
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(data)));
	}
	,__class__: why_qrcode_encoder_JsEncoder
};
var why_qrcode_printer_DataUrlPrinter = function(options) {
	if(options == null) {
		options = { };
	}
	this.black = options.black == null ? "#000000" : options.black;
	this.white = options.white == null ? "#ffffff" : options.white;
	this.blockSize = options.blockSize == null ? 4 : options.blockSize;
};
why_qrcode_printer_DataUrlPrinter.__name__ = true;
why_qrcode_printer_DataUrlPrinter.prototype = {
	print: function(data) {
		var canvas = window.document.createElement("canvas");
		var ctx = canvas.getContext("2d",null);
		canvas.width = canvas.height = (data.length + 4) * this.blockSize;
		ctx.fillStyle = this.white;
		ctx.fillRect(0,0,canvas.width,canvas.height);
		ctx.fillStyle = this.black;
		var _g = 0;
		var _g1 = data.length;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g11 = data.length;
			while(_g2 < _g11) {
				var x = _g2++;
				if(data[x][y] == 1) {
					ctx.fillRect((x + 2) * this.blockSize,(y + 2) * this.blockSize,this.blockSize,this.blockSize);
				}
			}
		}
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(canvas.toDataURL())));
	}
	,__class__: why_qrcode_printer_DataUrlPrinter
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
exp_rtg_Room.ids = 0;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
tink__$Chunk_EmptyChunk.EMPTY = new haxe_io_Bytes(new ArrayBuffer(0));
tink__$Chunk_Chunk_$Impl_$.EMPTY = new tink__$Chunk_EmptyChunk();
tink_core__$Callback_Callback_$Impl_$.depth = 0;
tink_core__$Promise_Promise_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
tink_state__$Observable_Observable_$Impl_$.stack = new haxe_ds_List();
tink_state_ObservableIterator.TRIGGER = haxe_ds_Option.Some(tink_core_Noise.Noise);
Playground.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
